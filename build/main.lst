ARM GAS  /tmp/ccmoXVAD.s 			page 1


   1              		.cpu cortex-m4
   2              		.arch armv7e-m
   3              		.fpu fpv4-sp-d16
   4              		.eabi_attribute 27, 1
   5              		.eabi_attribute 28, 1
   6              		.eabi_attribute 20, 1
   7              		.eabi_attribute 21, 1
   8              		.eabi_attribute 23, 3
   9              		.eabi_attribute 24, 1
  10              		.eabi_attribute 25, 1
  11              		.eabi_attribute 26, 1
  12              		.eabi_attribute 30, 1
  13              		.eabi_attribute 34, 1
  14              		.eabi_attribute 18, 4
  15              		.file	"main.c"
  16              		.text
  17              	.Ltext0:
  18              		.cfi_sections	.debug_frame
  19              		.file 1 "Core/Src/main.c"
  20              		.section	.text.MX_GPIO_Init,"ax",%progbits
  21              		.align	1
  22              		.syntax unified
  23              		.thumb
  24              		.thumb_func
  26              	MX_GPIO_Init:
  27              	.LFB228:
   1:Core/Src/main.c **** /* USER CODE BEGIN Header */
   2:Core/Src/main.c **** /**
   3:Core/Src/main.c ****   ******************************************************************************
   4:Core/Src/main.c ****   * @file           : main.c
   5:Core/Src/main.c ****   * @brief          : Main program body
   6:Core/Src/main.c ****   ******************************************************************************
   7:Core/Src/main.c ****   * @attention
   8:Core/Src/main.c ****   *
   9:Core/Src/main.c ****   * Copyright (c) 2024 STMicroelectronics.
  10:Core/Src/main.c ****   * All rights reserved.
  11:Core/Src/main.c ****   *
  12:Core/Src/main.c ****   * This software is licensed under terms that can be found in the LICENSE file
  13:Core/Src/main.c ****   * in the root directory of this software component.
  14:Core/Src/main.c ****   * If no LICENSE file comes with this software, it is provided AS-IS.
  15:Core/Src/main.c ****   *
  16:Core/Src/main.c ****   ******************************************************************************
  17:Core/Src/main.c ****   */
  18:Core/Src/main.c **** /* USER CODE END Header */
  19:Core/Src/main.c **** /* Includes ------------------------------------------------------------------*/
  20:Core/Src/main.c **** #include "main.h"
  21:Core/Src/main.c **** 
  22:Core/Src/main.c **** /* Private includes ----------------------------------------------------------*/
  23:Core/Src/main.c **** /* USER CODE BEGIN Includes */
  24:Core/Src/main.c **** 
  25:Core/Src/main.c **** /* USER CODE END Includes */
  26:Core/Src/main.c **** 
  27:Core/Src/main.c **** /* Private typedef -----------------------------------------------------------*/
  28:Core/Src/main.c **** /* USER CODE BEGIN PTD */
  29:Core/Src/main.c **** 
  30:Core/Src/main.c **** /* USER CODE END PTD */
  31:Core/Src/main.c **** 
ARM GAS  /tmp/ccmoXVAD.s 			page 2


  32:Core/Src/main.c **** /* Private define ------------------------------------------------------------*/
  33:Core/Src/main.c **** /* USER CODE BEGIN PD */
  34:Core/Src/main.c **** 
  35:Core/Src/main.c **** /* USER CODE END PD */
  36:Core/Src/main.c **** 
  37:Core/Src/main.c **** /* Private macro -------------------------------------------------------------*/
  38:Core/Src/main.c **** /* USER CODE BEGIN PM */
  39:Core/Src/main.c **** 
  40:Core/Src/main.c **** /* USER CODE END PM */
  41:Core/Src/main.c **** 
  42:Core/Src/main.c **** /* Private variables ---------------------------------------------------------*/
  43:Core/Src/main.c **** ADC_HandleTypeDef hadc1;
  44:Core/Src/main.c **** 
  45:Core/Src/main.c **** I2C_HandleTypeDef hi2c1;
  46:Core/Src/main.c **** 
  47:Core/Src/main.c **** TIM_HandleTypeDef htim2;
  48:Core/Src/main.c **** TIM_HandleTypeDef htim3;
  49:Core/Src/main.c **** TIM_HandleTypeDef htim4;
  50:Core/Src/main.c **** 
  51:Core/Src/main.c **** UART_HandleTypeDef huart1;
  52:Core/Src/main.c **** 
  53:Core/Src/main.c **** /* USER CODE BEGIN PV */
  54:Core/Src/main.c **** extern float distance[3];
  55:Core/Src/main.c **** extern uint8_t status[3];
  56:Core/Src/main.c **** /* USER CODE END PV */
  57:Core/Src/main.c **** 
  58:Core/Src/main.c **** /* Private function prototypes -----------------------------------------------*/
  59:Core/Src/main.c **** void SystemClock_Config(void);
  60:Core/Src/main.c **** static void MX_GPIO_Init(void);
  61:Core/Src/main.c **** static void MX_ADC1_Init(void);
  62:Core/Src/main.c **** static void MX_TIM2_Init(void);
  63:Core/Src/main.c **** static void MX_I2C1_Init(void);
  64:Core/Src/main.c **** static void MX_TIM3_Init(void);
  65:Core/Src/main.c **** static void MX_TIM4_Init(void);
  66:Core/Src/main.c **** static void MX_USART1_UART_Init(void);
  67:Core/Src/main.c **** /* USER CODE BEGIN PFP */
  68:Core/Src/main.c **** 
  69:Core/Src/main.c **** /* USER CODE END PFP */
  70:Core/Src/main.c **** 
  71:Core/Src/main.c **** /* Private user code ---------------------------------------------------------*/
  72:Core/Src/main.c **** /* USER CODE BEGIN 0 */
  73:Core/Src/main.c **** 
  74:Core/Src/main.c **** /* USER CODE END 0 */
  75:Core/Src/main.c **** 
  76:Core/Src/main.c **** /**
  77:Core/Src/main.c ****   * @brief  The application entry point.
  78:Core/Src/main.c ****   * @retval int
  79:Core/Src/main.c ****   */
  80:Core/Src/main.c **** int main(void)
  81:Core/Src/main.c **** {
  82:Core/Src/main.c **** 
  83:Core/Src/main.c ****   /* USER CODE BEGIN 1 */
  84:Core/Src/main.c ****   MPU6050_t MPU6050_Data;
  85:Core/Src/main.c **** 
  86:Core/Src/main.c ****   /* USER CODE END 1 */
  87:Core/Src/main.c **** 
  88:Core/Src/main.c ****   /* MCU Configuration--------------------------------------------------------*/
ARM GAS  /tmp/ccmoXVAD.s 			page 3


  89:Core/Src/main.c **** 
  90:Core/Src/main.c ****   /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  91:Core/Src/main.c ****   HAL_Init();
  92:Core/Src/main.c **** 
  93:Core/Src/main.c ****   /* USER CODE BEGIN Init */
  94:Core/Src/main.c **** 
  95:Core/Src/main.c ****   /* USER CODE END Init */
  96:Core/Src/main.c **** 
  97:Core/Src/main.c ****   /* Configure the system clock */
  98:Core/Src/main.c ****   SystemClock_Config();
  99:Core/Src/main.c **** 
 100:Core/Src/main.c ****   /* USER CODE BEGIN SysInit */
 101:Core/Src/main.c **** 
 102:Core/Src/main.c ****   /* USER CODE END SysInit */
 103:Core/Src/main.c **** 
 104:Core/Src/main.c ****   /* Initialize all configured peripherals */
 105:Core/Src/main.c ****   MX_GPIO_Init();
 106:Core/Src/main.c ****   MX_ADC1_Init();
 107:Core/Src/main.c ****   MX_TIM2_Init();
 108:Core/Src/main.c ****   MX_I2C1_Init();
 109:Core/Src/main.c ****   MX_TIM3_Init();
 110:Core/Src/main.c ****   MX_TIM4_Init();
 111:Core/Src/main.c ****   MX_USART1_UART_Init();
 112:Core/Src/main.c ****   /* USER CODE BEGIN 2 */
 113:Core/Src/main.c ****   setup_motor_dc();
 114:Core/Src/main.c ****   while(MPU6050_Data.MPU6050_address != 0x68){
 115:Core/Src/main.c **** 	    MPU6050_Data.MPU6050_address =MPU6050_Init(&hi2c1);
 116:Core/Src/main.c **** 	    HAL_Delay(50);
 117:Core/Src/main.c ****   }
 118:Core/Src/main.c **** 
 119:Core/Src/main.c ****   HAL_TIM_IC_Start_IT(&htim2, TIM_CHANNEL_1);
 120:Core/Src/main.c ****   HAL_TIM_IC_Start_IT(&htim2, TIM_CHANNEL_2);
 121:Core/Src/main.c ****   HAL_TIM_IC_Start_IT(&htim2, TIM_CHANNEL_3);
 122:Core/Src/main.c ****   HAL_TIM_IC_Start_IT(&htim2, TIM_CHANNEL_3);
 123:Core/Src/main.c ****   /* USER CODE END 2 */
 124:Core/Src/main.c **** 
 125:Core/Src/main.c ****   /* Infinite loop */
 126:Core/Src/main.c ****   /* USER CODE BEGIN WHILE */
 127:Core/Src/main.c ****   while (1)
 128:Core/Src/main.c ****   {
 129:Core/Src/main.c ****     Ultrasonic_Get_Distance();
 130:Core/Src/main.c ****     MPU6050_Read_All(&hi2c1, &MPU6050_Data);
 131:Core/Src/main.c ****     /* USER CODE END WHILE */
 132:Core/Src/main.c **** 
 133:Core/Src/main.c ****     /* USER CODE BEGIN 3 */
 134:Core/Src/main.c ****     HAL_Delay(100);
 135:Core/Src/main.c ****   }
 136:Core/Src/main.c ****   /* USER CODE END 3 */
 137:Core/Src/main.c **** }
 138:Core/Src/main.c **** 
 139:Core/Src/main.c **** /**
 140:Core/Src/main.c ****   * @brief System Clock Configuration
 141:Core/Src/main.c ****   * @retval None
 142:Core/Src/main.c ****   */
 143:Core/Src/main.c **** void SystemClock_Config(void)
 144:Core/Src/main.c **** {
 145:Core/Src/main.c ****   RCC_OscInitTypeDef RCC_OscInitStruct = {0};
ARM GAS  /tmp/ccmoXVAD.s 			page 4


 146:Core/Src/main.c ****   RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 147:Core/Src/main.c **** 
 148:Core/Src/main.c ****   /** Configure the main internal regulator output voltage
 149:Core/Src/main.c ****   */
 150:Core/Src/main.c ****   __HAL_RCC_PWR_CLK_ENABLE();
 151:Core/Src/main.c ****   __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 152:Core/Src/main.c **** 
 153:Core/Src/main.c ****   /** Initializes the RCC Oscillators according to the specified parameters
 154:Core/Src/main.c ****   * in the RCC_OscInitTypeDef structure.
 155:Core/Src/main.c ****   */
 156:Core/Src/main.c ****   RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 157:Core/Src/main.c ****   RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 158:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 159:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 160:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLM = 12;
 161:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLN = 96;
 162:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 163:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLQ = 4;
 164:Core/Src/main.c ****   if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 165:Core/Src/main.c ****   {
 166:Core/Src/main.c ****     Error_Handler();
 167:Core/Src/main.c ****   }
 168:Core/Src/main.c **** 
 169:Core/Src/main.c ****   /** Initializes the CPU, AHB and APB buses clocks
 170:Core/Src/main.c ****   */
 171:Core/Src/main.c ****   RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 172:Core/Src/main.c ****                               |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
 173:Core/Src/main.c ****   RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 174:Core/Src/main.c ****   RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 175:Core/Src/main.c ****   RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 176:Core/Src/main.c ****   RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 177:Core/Src/main.c **** 
 178:Core/Src/main.c ****   if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 179:Core/Src/main.c ****   {
 180:Core/Src/main.c ****     Error_Handler();
 181:Core/Src/main.c ****   }
 182:Core/Src/main.c **** }
 183:Core/Src/main.c **** 
 184:Core/Src/main.c **** /**
 185:Core/Src/main.c ****   * @brief ADC1 Initialization Function
 186:Core/Src/main.c ****   * @param None
 187:Core/Src/main.c ****   * @retval None
 188:Core/Src/main.c ****   */
 189:Core/Src/main.c **** static void MX_ADC1_Init(void)
 190:Core/Src/main.c **** {
 191:Core/Src/main.c **** 
 192:Core/Src/main.c ****   /* USER CODE BEGIN ADC1_Init 0 */
 193:Core/Src/main.c **** 
 194:Core/Src/main.c ****   /* USER CODE END ADC1_Init 0 */
 195:Core/Src/main.c **** 
 196:Core/Src/main.c ****   ADC_ChannelConfTypeDef sConfig = {0};
 197:Core/Src/main.c **** 
 198:Core/Src/main.c ****   /* USER CODE BEGIN ADC1_Init 1 */
 199:Core/Src/main.c **** 
 200:Core/Src/main.c ****   /* USER CODE END ADC1_Init 1 */
 201:Core/Src/main.c **** 
 202:Core/Src/main.c ****   /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of con
ARM GAS  /tmp/ccmoXVAD.s 			page 5


 203:Core/Src/main.c ****   */
 204:Core/Src/main.c ****   hadc1.Instance = ADC1;
 205:Core/Src/main.c ****   hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 206:Core/Src/main.c ****   hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 207:Core/Src/main.c ****   hadc1.Init.ScanConvMode = DISABLE;
 208:Core/Src/main.c ****   hadc1.Init.ContinuousConvMode = DISABLE;
 209:Core/Src/main.c ****   hadc1.Init.DiscontinuousConvMode = DISABLE;
 210:Core/Src/main.c ****   hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 211:Core/Src/main.c ****   hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 212:Core/Src/main.c ****   hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 213:Core/Src/main.c ****   hadc1.Init.NbrOfConversion = 1;
 214:Core/Src/main.c ****   hadc1.Init.DMAContinuousRequests = DISABLE;
 215:Core/Src/main.c ****   hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 216:Core/Src/main.c ****   if (HAL_ADC_Init(&hadc1) != HAL_OK)
 217:Core/Src/main.c ****   {
 218:Core/Src/main.c ****     Error_Handler();
 219:Core/Src/main.c ****   }
 220:Core/Src/main.c **** 
 221:Core/Src/main.c ****   /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and it
 222:Core/Src/main.c ****   */
 223:Core/Src/main.c ****   sConfig.Channel = ADC_CHANNEL_8;
 224:Core/Src/main.c ****   sConfig.Rank = 1;
 225:Core/Src/main.c ****   sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 226:Core/Src/main.c ****   if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 227:Core/Src/main.c ****   {
 228:Core/Src/main.c ****     Error_Handler();
 229:Core/Src/main.c ****   }
 230:Core/Src/main.c ****   /* USER CODE BEGIN ADC1_Init 2 */
 231:Core/Src/main.c **** 
 232:Core/Src/main.c ****   /* USER CODE END ADC1_Init 2 */
 233:Core/Src/main.c **** 
 234:Core/Src/main.c **** }
 235:Core/Src/main.c **** 
 236:Core/Src/main.c **** /**
 237:Core/Src/main.c ****   * @brief I2C1 Initialization Function
 238:Core/Src/main.c ****   * @param None
 239:Core/Src/main.c ****   * @retval None
 240:Core/Src/main.c ****   */
 241:Core/Src/main.c **** static void MX_I2C1_Init(void)
 242:Core/Src/main.c **** {
 243:Core/Src/main.c **** 
 244:Core/Src/main.c ****   /* USER CODE BEGIN I2C1_Init 0 */
 245:Core/Src/main.c **** 
 246:Core/Src/main.c ****   /* USER CODE END I2C1_Init 0 */
 247:Core/Src/main.c **** 
 248:Core/Src/main.c ****   /* USER CODE BEGIN I2C1_Init 1 */
 249:Core/Src/main.c **** 
 250:Core/Src/main.c ****   /* USER CODE END I2C1_Init 1 */
 251:Core/Src/main.c ****   hi2c1.Instance = I2C1;
 252:Core/Src/main.c ****   hi2c1.Init.ClockSpeed = 100000;
 253:Core/Src/main.c ****   hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 254:Core/Src/main.c ****   hi2c1.Init.OwnAddress1 = 0;
 255:Core/Src/main.c ****   hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 256:Core/Src/main.c ****   hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 257:Core/Src/main.c ****   hi2c1.Init.OwnAddress2 = 0;
 258:Core/Src/main.c ****   hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 259:Core/Src/main.c ****   hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
ARM GAS  /tmp/ccmoXVAD.s 			page 6


 260:Core/Src/main.c ****   if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 261:Core/Src/main.c ****   {
 262:Core/Src/main.c ****     Error_Handler();
 263:Core/Src/main.c ****   }
 264:Core/Src/main.c ****   /* USER CODE BEGIN I2C1_Init 2 */
 265:Core/Src/main.c **** 
 266:Core/Src/main.c ****   /* USER CODE END I2C1_Init 2 */
 267:Core/Src/main.c **** 
 268:Core/Src/main.c **** }
 269:Core/Src/main.c **** 
 270:Core/Src/main.c **** /**
 271:Core/Src/main.c ****   * @brief TIM2 Initialization Function
 272:Core/Src/main.c ****   * @param None
 273:Core/Src/main.c ****   * @retval None
 274:Core/Src/main.c ****   */
 275:Core/Src/main.c **** static void MX_TIM2_Init(void)
 276:Core/Src/main.c **** {
 277:Core/Src/main.c **** 
 278:Core/Src/main.c ****   /* USER CODE BEGIN TIM2_Init 0 */
 279:Core/Src/main.c **** 
 280:Core/Src/main.c ****   /* USER CODE END TIM2_Init 0 */
 281:Core/Src/main.c **** 
 282:Core/Src/main.c ****   TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 283:Core/Src/main.c ****   TIM_MasterConfigTypeDef sMasterConfig = {0};
 284:Core/Src/main.c ****   TIM_IC_InitTypeDef sConfigIC = {0};
 285:Core/Src/main.c **** 
 286:Core/Src/main.c ****   /* USER CODE BEGIN TIM2_Init 1 */
 287:Core/Src/main.c **** 
 288:Core/Src/main.c ****   /* USER CODE END TIM2_Init 1 */
 289:Core/Src/main.c ****   htim2.Instance = TIM2;
 290:Core/Src/main.c ****   htim2.Init.Prescaler = 99;
 291:Core/Src/main.c ****   htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 292:Core/Src/main.c ****   htim2.Init.Period = 4294967295;
 293:Core/Src/main.c ****   htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 294:Core/Src/main.c ****   htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 295:Core/Src/main.c ****   if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 296:Core/Src/main.c ****   {
 297:Core/Src/main.c ****     Error_Handler();
 298:Core/Src/main.c ****   }
 299:Core/Src/main.c ****   sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 300:Core/Src/main.c ****   if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 301:Core/Src/main.c ****   {
 302:Core/Src/main.c ****     Error_Handler();
 303:Core/Src/main.c ****   }
 304:Core/Src/main.c ****   if (HAL_TIM_IC_Init(&htim2) != HAL_OK)
 305:Core/Src/main.c ****   {
 306:Core/Src/main.c ****     Error_Handler();
 307:Core/Src/main.c ****   }
 308:Core/Src/main.c ****   sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 309:Core/Src/main.c ****   sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 310:Core/Src/main.c ****   if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 311:Core/Src/main.c ****   {
 312:Core/Src/main.c ****     Error_Handler();
 313:Core/Src/main.c ****   }
 314:Core/Src/main.c ****   sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 315:Core/Src/main.c ****   sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 316:Core/Src/main.c ****   sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
ARM GAS  /tmp/ccmoXVAD.s 			page 7


 317:Core/Src/main.c ****   sConfigIC.ICFilter = 0;
 318:Core/Src/main.c ****   if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 319:Core/Src/main.c ****   {
 320:Core/Src/main.c ****     Error_Handler();
 321:Core/Src/main.c ****   }
 322:Core/Src/main.c ****   if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 323:Core/Src/main.c ****   {
 324:Core/Src/main.c ****     Error_Handler();
 325:Core/Src/main.c ****   }
 326:Core/Src/main.c ****   if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_3) != HAL_OK)
 327:Core/Src/main.c ****   {
 328:Core/Src/main.c ****     Error_Handler();
 329:Core/Src/main.c ****   }
 330:Core/Src/main.c ****   /* USER CODE BEGIN TIM2_Init 2 */
 331:Core/Src/main.c **** 
 332:Core/Src/main.c ****   /* USER CODE END TIM2_Init 2 */
 333:Core/Src/main.c **** 
 334:Core/Src/main.c **** }
 335:Core/Src/main.c **** 
 336:Core/Src/main.c **** /**
 337:Core/Src/main.c ****   * @brief TIM3 Initialization Function
 338:Core/Src/main.c ****   * @param None
 339:Core/Src/main.c ****   * @retval None
 340:Core/Src/main.c ****   */
 341:Core/Src/main.c **** static void MX_TIM3_Init(void)
 342:Core/Src/main.c **** {
 343:Core/Src/main.c **** 
 344:Core/Src/main.c ****   /* USER CODE BEGIN TIM3_Init 0 */
 345:Core/Src/main.c **** 
 346:Core/Src/main.c ****   /* USER CODE END TIM3_Init 0 */
 347:Core/Src/main.c **** 
 348:Core/Src/main.c ****   TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 349:Core/Src/main.c ****   TIM_MasterConfigTypeDef sMasterConfig = {0};
 350:Core/Src/main.c ****   TIM_OC_InitTypeDef sConfigOC = {0};
 351:Core/Src/main.c **** 
 352:Core/Src/main.c ****   /* USER CODE BEGIN TIM3_Init 1 */
 353:Core/Src/main.c **** 
 354:Core/Src/main.c ****   /* USER CODE END TIM3_Init 1 */
 355:Core/Src/main.c ****   htim3.Instance = TIM3;
 356:Core/Src/main.c ****   htim3.Init.Prescaler = 0;
 357:Core/Src/main.c ****   htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 358:Core/Src/main.c ****   htim3.Init.Period = 65535;
 359:Core/Src/main.c ****   htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 360:Core/Src/main.c ****   htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 361:Core/Src/main.c ****   if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 362:Core/Src/main.c ****   {
 363:Core/Src/main.c ****     Error_Handler();
 364:Core/Src/main.c ****   }
 365:Core/Src/main.c ****   sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 366:Core/Src/main.c ****   if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 367:Core/Src/main.c ****   {
 368:Core/Src/main.c ****     Error_Handler();
 369:Core/Src/main.c ****   }
 370:Core/Src/main.c ****   if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 371:Core/Src/main.c ****   {
 372:Core/Src/main.c ****     Error_Handler();
 373:Core/Src/main.c ****   }
ARM GAS  /tmp/ccmoXVAD.s 			page 8


 374:Core/Src/main.c ****   sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 375:Core/Src/main.c ****   sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 376:Core/Src/main.c ****   if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 377:Core/Src/main.c ****   {
 378:Core/Src/main.c ****     Error_Handler();
 379:Core/Src/main.c ****   }
 380:Core/Src/main.c ****   sConfigOC.OCMode = TIM_OCMODE_PWM1;
 381:Core/Src/main.c ****   sConfigOC.Pulse = 0;
 382:Core/Src/main.c ****   sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 383:Core/Src/main.c ****   sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 384:Core/Src/main.c ****   if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 385:Core/Src/main.c ****   {
 386:Core/Src/main.c ****     Error_Handler();
 387:Core/Src/main.c ****   }
 388:Core/Src/main.c ****   if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 389:Core/Src/main.c ****   {
 390:Core/Src/main.c ****     Error_Handler();
 391:Core/Src/main.c ****   }
 392:Core/Src/main.c ****   /* USER CODE BEGIN TIM3_Init 2 */
 393:Core/Src/main.c **** 
 394:Core/Src/main.c ****   /* USER CODE END TIM3_Init 2 */
 395:Core/Src/main.c ****   HAL_TIM_MspPostInit(&htim3);
 396:Core/Src/main.c **** 
 397:Core/Src/main.c **** }
 398:Core/Src/main.c **** 
 399:Core/Src/main.c **** /**
 400:Core/Src/main.c ****   * @brief TIM4 Initialization Function
 401:Core/Src/main.c ****   * @param None
 402:Core/Src/main.c ****   * @retval None
 403:Core/Src/main.c ****   */
 404:Core/Src/main.c **** static void MX_TIM4_Init(void)
 405:Core/Src/main.c **** {
 406:Core/Src/main.c **** 
 407:Core/Src/main.c ****   /* USER CODE BEGIN TIM4_Init 0 */
 408:Core/Src/main.c **** 
 409:Core/Src/main.c ****   /* USER CODE END TIM4_Init 0 */
 410:Core/Src/main.c **** 
 411:Core/Src/main.c ****   TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 412:Core/Src/main.c ****   TIM_MasterConfigTypeDef sMasterConfig = {0};
 413:Core/Src/main.c ****   TIM_OC_InitTypeDef sConfigOC = {0};
 414:Core/Src/main.c **** 
 415:Core/Src/main.c ****   /* USER CODE BEGIN TIM4_Init 1 */
 416:Core/Src/main.c **** 
 417:Core/Src/main.c ****   /* USER CODE END TIM4_Init 1 */
 418:Core/Src/main.c ****   htim4.Instance = TIM4;
 419:Core/Src/main.c ****   htim4.Init.Prescaler = 0;
 420:Core/Src/main.c ****   htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 421:Core/Src/main.c ****   htim4.Init.Period = 65535;
 422:Core/Src/main.c ****   htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 423:Core/Src/main.c ****   htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 424:Core/Src/main.c ****   if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 425:Core/Src/main.c ****   {
 426:Core/Src/main.c ****     Error_Handler();
 427:Core/Src/main.c ****   }
 428:Core/Src/main.c ****   sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 429:Core/Src/main.c ****   if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 430:Core/Src/main.c ****   {
ARM GAS  /tmp/ccmoXVAD.s 			page 9


 431:Core/Src/main.c ****     Error_Handler();
 432:Core/Src/main.c ****   }
 433:Core/Src/main.c ****   if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 434:Core/Src/main.c ****   {
 435:Core/Src/main.c ****     Error_Handler();
 436:Core/Src/main.c ****   }
 437:Core/Src/main.c ****   sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 438:Core/Src/main.c ****   sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 439:Core/Src/main.c ****   if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 440:Core/Src/main.c ****   {
 441:Core/Src/main.c ****     Error_Handler();
 442:Core/Src/main.c ****   }
 443:Core/Src/main.c ****   sConfigOC.OCMode = TIM_OCMODE_PWM1;
 444:Core/Src/main.c ****   sConfigOC.Pulse = 0;
 445:Core/Src/main.c ****   sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 446:Core/Src/main.c ****   sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 447:Core/Src/main.c ****   if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 448:Core/Src/main.c ****   {
 449:Core/Src/main.c ****     Error_Handler();
 450:Core/Src/main.c ****   }
 451:Core/Src/main.c ****   if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 452:Core/Src/main.c ****   {
 453:Core/Src/main.c ****     Error_Handler();
 454:Core/Src/main.c ****   }
 455:Core/Src/main.c ****   /* USER CODE BEGIN TIM4_Init 2 */
 456:Core/Src/main.c **** 
 457:Core/Src/main.c ****   /* USER CODE END TIM4_Init 2 */
 458:Core/Src/main.c ****   HAL_TIM_MspPostInit(&htim4);
 459:Core/Src/main.c **** 
 460:Core/Src/main.c **** }
 461:Core/Src/main.c **** 
 462:Core/Src/main.c **** /**
 463:Core/Src/main.c ****   * @brief USART1 Initialization Function
 464:Core/Src/main.c ****   * @param None
 465:Core/Src/main.c ****   * @retval None
 466:Core/Src/main.c ****   */
 467:Core/Src/main.c **** static void MX_USART1_UART_Init(void)
 468:Core/Src/main.c **** {
 469:Core/Src/main.c **** 
 470:Core/Src/main.c ****   /* USER CODE BEGIN USART1_Init 0 */
 471:Core/Src/main.c **** 
 472:Core/Src/main.c ****   /* USER CODE END USART1_Init 0 */
 473:Core/Src/main.c **** 
 474:Core/Src/main.c ****   /* USER CODE BEGIN USART1_Init 1 */
 475:Core/Src/main.c **** 
 476:Core/Src/main.c ****   /* USER CODE END USART1_Init 1 */
 477:Core/Src/main.c ****   huart1.Instance = USART1;
 478:Core/Src/main.c ****   huart1.Init.BaudRate = 115200;
 479:Core/Src/main.c ****   huart1.Init.WordLength = UART_WORDLENGTH_8B;
 480:Core/Src/main.c ****   huart1.Init.StopBits = UART_STOPBITS_1;
 481:Core/Src/main.c ****   huart1.Init.Parity = UART_PARITY_NONE;
 482:Core/Src/main.c ****   huart1.Init.Mode = UART_MODE_TX_RX;
 483:Core/Src/main.c ****   huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 484:Core/Src/main.c ****   huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 485:Core/Src/main.c ****   if (HAL_UART_Init(&huart1) != HAL_OK)
 486:Core/Src/main.c ****   {
 487:Core/Src/main.c ****     Error_Handler();
ARM GAS  /tmp/ccmoXVAD.s 			page 10


 488:Core/Src/main.c ****   }
 489:Core/Src/main.c ****   /* USER CODE BEGIN USART1_Init 2 */
 490:Core/Src/main.c **** 
 491:Core/Src/main.c ****   /* USER CODE END USART1_Init 2 */
 492:Core/Src/main.c **** 
 493:Core/Src/main.c **** }
 494:Core/Src/main.c **** 
 495:Core/Src/main.c **** /**
 496:Core/Src/main.c ****   * @brief GPIO Initialization Function
 497:Core/Src/main.c ****   * @param None
 498:Core/Src/main.c ****   * @retval None
 499:Core/Src/main.c ****   */
 500:Core/Src/main.c **** static void MX_GPIO_Init(void)
 501:Core/Src/main.c **** {
  28              		.loc 1 501 1 view -0
  29              		.cfi_startproc
  30              		@ args = 0, pretend = 0, frame = 40
  31              		@ frame_needed = 0, uses_anonymous_args = 0
  32 0000 F0B5     		push	{r4, r5, r6, r7, lr}
  33              	.LCFI0:
  34              		.cfi_def_cfa_offset 20
  35              		.cfi_offset 4, -20
  36              		.cfi_offset 5, -16
  37              		.cfi_offset 6, -12
  38              		.cfi_offset 7, -8
  39              		.cfi_offset 14, -4
  40 0002 8BB0     		sub	sp, sp, #44
  41              	.LCFI1:
  42              		.cfi_def_cfa_offset 64
 502:Core/Src/main.c ****   GPIO_InitTypeDef GPIO_InitStruct = {0};
  43              		.loc 1 502 3 view .LVU1
  44              		.loc 1 502 20 is_stmt 0 view .LVU2
  45 0004 0024     		movs	r4, #0
  46 0006 0594     		str	r4, [sp, #20]
  47 0008 0694     		str	r4, [sp, #24]
  48 000a 0794     		str	r4, [sp, #28]
  49 000c 0894     		str	r4, [sp, #32]
  50 000e 0994     		str	r4, [sp, #36]
 503:Core/Src/main.c **** /* USER CODE BEGIN MX_GPIO_Init_1 */
 504:Core/Src/main.c **** /* USER CODE END MX_GPIO_Init_1 */
 505:Core/Src/main.c **** 
 506:Core/Src/main.c ****   /* GPIO Ports Clock Enable */
 507:Core/Src/main.c ****   __HAL_RCC_GPIOC_CLK_ENABLE();
  51              		.loc 1 507 3 is_stmt 1 view .LVU3
  52              	.LBB4:
  53              		.loc 1 507 3 view .LVU4
  54 0010 0194     		str	r4, [sp, #4]
  55              		.loc 1 507 3 view .LVU5
  56 0012 2B4B     		ldr	r3, .L3
  57 0014 1A6B     		ldr	r2, [r3, #48]
  58 0016 42F00402 		orr	r2, r2, #4
  59 001a 1A63     		str	r2, [r3, #48]
  60              		.loc 1 507 3 view .LVU6
  61 001c 1A6B     		ldr	r2, [r3, #48]
  62 001e 02F00402 		and	r2, r2, #4
  63 0022 0192     		str	r2, [sp, #4]
  64              		.loc 1 507 3 view .LVU7
ARM GAS  /tmp/ccmoXVAD.s 			page 11


  65 0024 019A     		ldr	r2, [sp, #4]
  66              	.LBE4:
  67              		.loc 1 507 3 view .LVU8
 508:Core/Src/main.c ****   __HAL_RCC_GPIOH_CLK_ENABLE();
  68              		.loc 1 508 3 view .LVU9
  69              	.LBB5:
  70              		.loc 1 508 3 view .LVU10
  71 0026 0294     		str	r4, [sp, #8]
  72              		.loc 1 508 3 view .LVU11
  73 0028 1A6B     		ldr	r2, [r3, #48]
  74 002a 42F08002 		orr	r2, r2, #128
  75 002e 1A63     		str	r2, [r3, #48]
  76              		.loc 1 508 3 view .LVU12
  77 0030 1A6B     		ldr	r2, [r3, #48]
  78 0032 02F08002 		and	r2, r2, #128
  79 0036 0292     		str	r2, [sp, #8]
  80              		.loc 1 508 3 view .LVU13
  81 0038 029A     		ldr	r2, [sp, #8]
  82              	.LBE5:
  83              		.loc 1 508 3 view .LVU14
 509:Core/Src/main.c ****   __HAL_RCC_GPIOA_CLK_ENABLE();
  84              		.loc 1 509 3 view .LVU15
  85              	.LBB6:
  86              		.loc 1 509 3 view .LVU16
  87 003a 0394     		str	r4, [sp, #12]
  88              		.loc 1 509 3 view .LVU17
  89 003c 1A6B     		ldr	r2, [r3, #48]
  90 003e 42F00102 		orr	r2, r2, #1
  91 0042 1A63     		str	r2, [r3, #48]
  92              		.loc 1 509 3 view .LVU18
  93 0044 1A6B     		ldr	r2, [r3, #48]
  94 0046 02F00102 		and	r2, r2, #1
  95 004a 0392     		str	r2, [sp, #12]
  96              		.loc 1 509 3 view .LVU19
  97 004c 039A     		ldr	r2, [sp, #12]
  98              	.LBE6:
  99              		.loc 1 509 3 view .LVU20
 510:Core/Src/main.c ****   __HAL_RCC_GPIOB_CLK_ENABLE();
 100              		.loc 1 510 3 view .LVU21
 101              	.LBB7:
 102              		.loc 1 510 3 view .LVU22
 103 004e 0494     		str	r4, [sp, #16]
 104              		.loc 1 510 3 view .LVU23
 105 0050 1A6B     		ldr	r2, [r3, #48]
 106 0052 42F00202 		orr	r2, r2, #2
 107 0056 1A63     		str	r2, [r3, #48]
 108              		.loc 1 510 3 view .LVU24
 109 0058 1B6B     		ldr	r3, [r3, #48]
 110 005a 03F00203 		and	r3, r3, #2
 111 005e 0493     		str	r3, [sp, #16]
 112              		.loc 1 510 3 view .LVU25
 113 0060 049B     		ldr	r3, [sp, #16]
 114              	.LBE7:
 115              		.loc 1 510 3 view .LVU26
 511:Core/Src/main.c **** 
 512:Core/Src/main.c ****   /*Configure GPIO pin Output Level */
 513:Core/Src/main.c ****   HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13|GPIO_PIN_15, GPIO_PIN_RESET);
ARM GAS  /tmp/ccmoXVAD.s 			page 12


 116              		.loc 1 513 3 view .LVU27
 117 0062 184F     		ldr	r7, .L3+4
 118 0064 2246     		mov	r2, r4
 119 0066 4FF42041 		mov	r1, #40960
 120 006a 3846     		mov	r0, r7
 121 006c FFF7FEFF 		bl	HAL_GPIO_WritePin
 122              	.LVL0:
 514:Core/Src/main.c **** 
 515:Core/Src/main.c ****   /*Configure GPIO pin Output Level */
 516:Core/Src/main.c ****   HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, GPIO_PIN_RESET);
 123              		.loc 1 516 3 view .LVU28
 124 0070 154D     		ldr	r5, .L3+8
 125 0072 2246     		mov	r2, r4
 126 0074 4FF48061 		mov	r1, #1024
 127 0078 2846     		mov	r0, r5
 128 007a FFF7FEFF 		bl	HAL_GPIO_WritePin
 129              	.LVL1:
 517:Core/Src/main.c **** 
 518:Core/Src/main.c ****   /*Configure GPIO pins : PC13 PC15 */
 519:Core/Src/main.c ****   GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_15;
 130              		.loc 1 519 3 view .LVU29
 131              		.loc 1 519 23 is_stmt 0 view .LVU30
 132 007e 4FF42043 		mov	r3, #40960
 133 0082 0593     		str	r3, [sp, #20]
 520:Core/Src/main.c ****   GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 134              		.loc 1 520 3 is_stmt 1 view .LVU31
 135              		.loc 1 520 24 is_stmt 0 view .LVU32
 136 0084 0126     		movs	r6, #1
 137 0086 0696     		str	r6, [sp, #24]
 521:Core/Src/main.c ****   GPIO_InitStruct.Pull = GPIO_NOPULL;
 138              		.loc 1 521 3 is_stmt 1 view .LVU33
 139              		.loc 1 521 24 is_stmt 0 view .LVU34
 140 0088 0794     		str	r4, [sp, #28]
 522:Core/Src/main.c ****   GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 141              		.loc 1 522 3 is_stmt 1 view .LVU35
 142              		.loc 1 522 25 is_stmt 0 view .LVU36
 143 008a 0894     		str	r4, [sp, #32]
 523:Core/Src/main.c ****   HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 144              		.loc 1 523 3 is_stmt 1 view .LVU37
 145 008c 05A9     		add	r1, sp, #20
 146 008e 3846     		mov	r0, r7
 147 0090 FFF7FEFF 		bl	HAL_GPIO_Init
 148              	.LVL2:
 524:Core/Src/main.c **** 
 525:Core/Src/main.c ****   /*Configure GPIO pin : PB10 */
 526:Core/Src/main.c ****   GPIO_InitStruct.Pin = GPIO_PIN_10;
 149              		.loc 1 526 3 view .LVU38
 150              		.loc 1 526 23 is_stmt 0 view .LVU39
 151 0094 4FF48063 		mov	r3, #1024
 152 0098 0593     		str	r3, [sp, #20]
 527:Core/Src/main.c ****   GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 153              		.loc 1 527 3 is_stmt 1 view .LVU40
 154              		.loc 1 527 24 is_stmt 0 view .LVU41
 155 009a 0696     		str	r6, [sp, #24]
 528:Core/Src/main.c ****   GPIO_InitStruct.Pull = GPIO_NOPULL;
 156              		.loc 1 528 3 is_stmt 1 view .LVU42
 157              		.loc 1 528 24 is_stmt 0 view .LVU43
ARM GAS  /tmp/ccmoXVAD.s 			page 13


 158 009c 0794     		str	r4, [sp, #28]
 529:Core/Src/main.c ****   GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 159              		.loc 1 529 3 is_stmt 1 view .LVU44
 160              		.loc 1 529 25 is_stmt 0 view .LVU45
 161 009e 0894     		str	r4, [sp, #32]
 530:Core/Src/main.c ****   HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 162              		.loc 1 530 3 is_stmt 1 view .LVU46
 163 00a0 05A9     		add	r1, sp, #20
 164 00a2 2846     		mov	r0, r5
 165 00a4 FFF7FEFF 		bl	HAL_GPIO_Init
 166              	.LVL3:
 531:Core/Src/main.c **** 
 532:Core/Src/main.c ****   /*Configure GPIO pins : Botton0_Pin Botton1_Pin Botton2_Pin Botton3_Pin */
 533:Core/Src/main.c ****   GPIO_InitStruct.Pin = Botton0_Pin|Botton1_Pin|Botton2_Pin|Botton3_Pin;
 167              		.loc 1 533 3 view .LVU47
 168              		.loc 1 533 23 is_stmt 0 view .LVU48
 169 00a8 4FF47043 		mov	r3, #61440
 170 00ac 0593     		str	r3, [sp, #20]
 534:Core/Src/main.c ****   GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 171              		.loc 1 534 3 is_stmt 1 view .LVU49
 172              		.loc 1 534 24 is_stmt 0 view .LVU50
 173 00ae 0694     		str	r4, [sp, #24]
 535:Core/Src/main.c ****   GPIO_InitStruct.Pull = GPIO_PULLUP;
 174              		.loc 1 535 3 is_stmt 1 view .LVU51
 175              		.loc 1 535 24 is_stmt 0 view .LVU52
 176 00b0 0796     		str	r6, [sp, #28]
 536:Core/Src/main.c ****   HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 177              		.loc 1 536 3 is_stmt 1 view .LVU53
 178 00b2 05A9     		add	r1, sp, #20
 179 00b4 2846     		mov	r0, r5
 180 00b6 FFF7FEFF 		bl	HAL_GPIO_Init
 181              	.LVL4:
 537:Core/Src/main.c **** 
 538:Core/Src/main.c **** /* USER CODE BEGIN MX_GPIO_Init_2 */
 539:Core/Src/main.c **** /* USER CODE END MX_GPIO_Init_2 */
 540:Core/Src/main.c **** }
 182              		.loc 1 540 1 is_stmt 0 view .LVU54
 183 00ba 0BB0     		add	sp, sp, #44
 184              	.LCFI2:
 185              		.cfi_def_cfa_offset 20
 186              		@ sp needed
 187 00bc F0BD     		pop	{r4, r5, r6, r7, pc}
 188              	.L4:
 189 00be 00BF     		.align	2
 190              	.L3:
 191 00c0 00380240 		.word	1073887232
 192 00c4 00080240 		.word	1073874944
 193 00c8 00040240 		.word	1073873920
 194              		.cfi_endproc
 195              	.LFE228:
 197              		.section	.text.Error_Handler,"ax",%progbits
 198              		.align	1
 199              		.global	Error_Handler
 200              		.syntax unified
 201              		.thumb
 202              		.thumb_func
 204              	Error_Handler:
ARM GAS  /tmp/ccmoXVAD.s 			page 14


 205              	.LFB229:
 541:Core/Src/main.c **** 
 542:Core/Src/main.c **** /* USER CODE BEGIN 4 */
 543:Core/Src/main.c **** 
 544:Core/Src/main.c **** /* USER CODE END 4 */
 545:Core/Src/main.c **** 
 546:Core/Src/main.c **** /**
 547:Core/Src/main.c ****   * @brief  This function is executed in case of error occurrence.
 548:Core/Src/main.c ****   * @retval None
 549:Core/Src/main.c ****   */
 550:Core/Src/main.c **** void Error_Handler(void)
 551:Core/Src/main.c **** {
 206              		.loc 1 551 1 is_stmt 1 view -0
 207              		.cfi_startproc
 208              		@ Volatile: function does not return.
 209              		@ args = 0, pretend = 0, frame = 0
 210              		@ frame_needed = 0, uses_anonymous_args = 0
 211              		@ link register save eliminated.
 552:Core/Src/main.c ****   /* USER CODE BEGIN Error_Handler_Debug */
 553:Core/Src/main.c ****   /* User can add his own implementation to report the HAL error return state */
 554:Core/Src/main.c ****   __disable_irq();
 212              		.loc 1 554 3 view .LVU56
 213              	.LBB8:
 214              	.LBI8:
 215              		.file 2 "Drivers/CMSIS/Include/cmsis_gcc.h"
   1:Drivers/CMSIS/Include/cmsis_gcc.h **** /**************************************************************************//**
   2:Drivers/CMSIS/Include/cmsis_gcc.h ****  * @file     cmsis_gcc.h
   3:Drivers/CMSIS/Include/cmsis_gcc.h ****  * @brief    CMSIS compiler GCC header file
   4:Drivers/CMSIS/Include/cmsis_gcc.h ****  * @version  V5.4.1
   5:Drivers/CMSIS/Include/cmsis_gcc.h ****  * @date     27. May 2021
   6:Drivers/CMSIS/Include/cmsis_gcc.h ****  ******************************************************************************/
   7:Drivers/CMSIS/Include/cmsis_gcc.h **** /*
   8:Drivers/CMSIS/Include/cmsis_gcc.h ****  * Copyright (c) 2009-2021 Arm Limited. All rights reserved.
   9:Drivers/CMSIS/Include/cmsis_gcc.h ****  *
  10:Drivers/CMSIS/Include/cmsis_gcc.h ****  * SPDX-License-Identifier: Apache-2.0
  11:Drivers/CMSIS/Include/cmsis_gcc.h ****  *
  12:Drivers/CMSIS/Include/cmsis_gcc.h ****  * Licensed under the Apache License, Version 2.0 (the License); you may
  13:Drivers/CMSIS/Include/cmsis_gcc.h ****  * not use this file except in compliance with the License.
  14:Drivers/CMSIS/Include/cmsis_gcc.h ****  * You may obtain a copy of the License at
  15:Drivers/CMSIS/Include/cmsis_gcc.h ****  *
  16:Drivers/CMSIS/Include/cmsis_gcc.h ****  * www.apache.org/licenses/LICENSE-2.0
  17:Drivers/CMSIS/Include/cmsis_gcc.h ****  *
  18:Drivers/CMSIS/Include/cmsis_gcc.h ****  * Unless required by applicable law or agreed to in writing, software
  19:Drivers/CMSIS/Include/cmsis_gcc.h ****  * distributed under the License is distributed on an AS IS BASIS, WITHOUT
  20:Drivers/CMSIS/Include/cmsis_gcc.h ****  * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  21:Drivers/CMSIS/Include/cmsis_gcc.h ****  * See the License for the specific language governing permissions and
  22:Drivers/CMSIS/Include/cmsis_gcc.h ****  * limitations under the License.
  23:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
  24:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  25:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __CMSIS_GCC_H
  26:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_H
  27:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  28:Drivers/CMSIS/Include/cmsis_gcc.h **** /* ignore some GCC warnings */
  29:Drivers/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic push
  30:Drivers/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wsign-conversion"
  31:Drivers/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wconversion"
  32:Drivers/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wunused-parameter"
ARM GAS  /tmp/ccmoXVAD.s 			page 15


  33:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  34:Drivers/CMSIS/Include/cmsis_gcc.h **** /* Fallback for __has_builtin */
  35:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __has_builtin
  36:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __has_builtin(x) (0)
  37:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  38:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  39:Drivers/CMSIS/Include/cmsis_gcc.h **** /* CMSIS compiler specific defines */
  40:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __ASM
  41:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __ASM                                  __asm
  42:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  43:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __INLINE
  44:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __INLINE                               inline
  45:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  46:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __STATIC_INLINE
  47:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __STATIC_INLINE                        static inline
  48:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  49:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __STATIC_FORCEINLINE
  50:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __STATIC_FORCEINLINE                   __attribute__((always_inline)) static inline
  51:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  52:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __NO_RETURN
  53:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __NO_RETURN                            __attribute__((__noreturn__))
  54:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  55:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __USED
  56:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __USED                                 __attribute__((used))
  57:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  58:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __WEAK
  59:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __WEAK                                 __attribute__((weak))
  60:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  61:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __PACKED
  62:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __PACKED                               __attribute__((packed, aligned(1)))
  63:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  64:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __PACKED_STRUCT
  65:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __PACKED_STRUCT                        struct __attribute__((packed, aligned(1)))
  66:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  67:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __PACKED_UNION
  68:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __PACKED_UNION                         union __attribute__((packed, aligned(1)))
  69:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  70:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT32        /* deprecated */
  71:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
  72:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
  73:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
  74:Drivers/CMSIS/Include/cmsis_gcc.h ****   struct __attribute__((packed)) T_UINT32 { uint32_t v; };
  75:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
  76:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT32(x)                  (((struct T_UINT32 *)(x))->v)
  77:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  78:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT16_WRITE
  79:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
  80:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
  81:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
  82:Drivers/CMSIS/Include/cmsis_gcc.h ****   __PACKED_STRUCT T_UINT16_WRITE { uint16_t v; };
  83:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
  84:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT16_WRITE(addr, val)    (void)((((struct T_UINT16_WRITE *)(void *)(addr))-
  85:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  86:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT16_READ
  87:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
  88:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
  89:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
ARM GAS  /tmp/ccmoXVAD.s 			page 16


  90:Drivers/CMSIS/Include/cmsis_gcc.h ****   __PACKED_STRUCT T_UINT16_READ { uint16_t v; };
  91:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
  92:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT16_READ(addr)          (((const struct T_UINT16_READ *)(const void *)(add
  93:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  94:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT32_WRITE
  95:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
  96:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
  97:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
  98:Drivers/CMSIS/Include/cmsis_gcc.h ****   __PACKED_STRUCT T_UINT32_WRITE { uint32_t v; };
  99:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
 100:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT32_WRITE(addr, val)    (void)((((struct T_UINT32_WRITE *)(void *)(addr))-
 101:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 102:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT32_READ
 103:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
 104:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
 105:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
 106:Drivers/CMSIS/Include/cmsis_gcc.h ****   __PACKED_STRUCT T_UINT32_READ { uint32_t v; };
 107:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
 108:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT32_READ(addr)          (((const struct T_UINT32_READ *)(const void *)(add
 109:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 110:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __ALIGNED
 111:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __ALIGNED(x)                           __attribute__((aligned(x)))
 112:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 113:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __RESTRICT
 114:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __RESTRICT                             __restrict
 115:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 116:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __COMPILER_BARRIER
 117:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __COMPILER_BARRIER()                   __ASM volatile("":::"memory")
 118:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 119:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 120:Drivers/CMSIS/Include/cmsis_gcc.h **** /* #########################  Startup and Lowlevel Init  ######################## */
 121:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 122:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __PROGRAM_START
 123:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 124:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 125:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Initializes data and bss sections
 126:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details This default implementations initialized all data and additional bss
 127:Drivers/CMSIS/Include/cmsis_gcc.h ****            sections relying on .copy.table and .zero.table specified properly
 128:Drivers/CMSIS/Include/cmsis_gcc.h ****            in the used linker script.
 129:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 130:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 131:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE __NO_RETURN void __cmsis_start(void)
 132:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 133:Drivers/CMSIS/Include/cmsis_gcc.h ****   extern void _start(void) __NO_RETURN;
 134:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 135:Drivers/CMSIS/Include/cmsis_gcc.h ****   typedef struct {
 136:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t const* src;
 137:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t* dest;
 138:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t  wlen;
 139:Drivers/CMSIS/Include/cmsis_gcc.h ****   } __copy_table_t;
 140:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 141:Drivers/CMSIS/Include/cmsis_gcc.h ****   typedef struct {
 142:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t* dest;
 143:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t  wlen;
 144:Drivers/CMSIS/Include/cmsis_gcc.h ****   } __zero_table_t;
 145:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 146:Drivers/CMSIS/Include/cmsis_gcc.h ****   extern const __copy_table_t __copy_table_start__;
ARM GAS  /tmp/ccmoXVAD.s 			page 17


 147:Drivers/CMSIS/Include/cmsis_gcc.h ****   extern const __copy_table_t __copy_table_end__;
 148:Drivers/CMSIS/Include/cmsis_gcc.h ****   extern const __zero_table_t __zero_table_start__;
 149:Drivers/CMSIS/Include/cmsis_gcc.h ****   extern const __zero_table_t __zero_table_end__;
 150:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 151:Drivers/CMSIS/Include/cmsis_gcc.h ****   for (__copy_table_t const* pTable = &__copy_table_start__; pTable < &__copy_table_end__; ++pTable
 152:Drivers/CMSIS/Include/cmsis_gcc.h ****     for(uint32_t i=0u; i<pTable->wlen; ++i) {
 153:Drivers/CMSIS/Include/cmsis_gcc.h ****       pTable->dest[i] = pTable->src[i];
 154:Drivers/CMSIS/Include/cmsis_gcc.h ****     }
 155:Drivers/CMSIS/Include/cmsis_gcc.h ****   }
 156:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 157:Drivers/CMSIS/Include/cmsis_gcc.h ****   for (__zero_table_t const* pTable = &__zero_table_start__; pTable < &__zero_table_end__; ++pTable
 158:Drivers/CMSIS/Include/cmsis_gcc.h ****     for(uint32_t i=0u; i<pTable->wlen; ++i) {
 159:Drivers/CMSIS/Include/cmsis_gcc.h ****       pTable->dest[i] = 0u;
 160:Drivers/CMSIS/Include/cmsis_gcc.h ****     }
 161:Drivers/CMSIS/Include/cmsis_gcc.h ****   }
 162:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 163:Drivers/CMSIS/Include/cmsis_gcc.h ****   _start();
 164:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 165:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 166:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __PROGRAM_START           __cmsis_start
 167:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 168:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 169:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __INITIAL_SP
 170:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __INITIAL_SP              __StackTop
 171:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 172:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 173:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __STACK_LIMIT
 174:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __STACK_LIMIT             __StackLimit
 175:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 176:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 177:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __VECTOR_TABLE
 178:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __VECTOR_TABLE            __Vectors
 179:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 180:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 181:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __VECTOR_TABLE_ATTRIBUTE
 182:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __VECTOR_TABLE_ATTRIBUTE  __attribute__((used, section(".vectors")))
 183:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 184:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 185:Drivers/CMSIS/Include/cmsis_gcc.h **** #if defined (__ARM_FEATURE_CMSE) && (__ARM_FEATURE_CMSE == 3U)
 186:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __STACK_SEAL
 187:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __STACK_SEAL              __StackSeal
 188:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 189:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 190:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __TZ_STACK_SEAL_SIZE
 191:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __TZ_STACK_SEAL_SIZE      8U
 192:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 193:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 194:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __TZ_STACK_SEAL_VALUE
 195:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __TZ_STACK_SEAL_VALUE     0xFEF5EDA5FEF5EDA5ULL
 196:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 197:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 198:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 199:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __TZ_set_STACKSEAL_S (uint32_t* stackTop) {
 200:Drivers/CMSIS/Include/cmsis_gcc.h ****   *((uint64_t *)stackTop) = __TZ_STACK_SEAL_VALUE;
 201:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 202:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 203:Drivers/CMSIS/Include/cmsis_gcc.h **** 
ARM GAS  /tmp/ccmoXVAD.s 			page 18


 204:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 205:Drivers/CMSIS/Include/cmsis_gcc.h **** /* ##########################  Core Instruction Access  ######################### */
 206:Drivers/CMSIS/Include/cmsis_gcc.h **** /** \defgroup CMSIS_Core_InstructionInterface CMSIS Core Instruction Interface
 207:Drivers/CMSIS/Include/cmsis_gcc.h ****   Access to dedicated instructions
 208:Drivers/CMSIS/Include/cmsis_gcc.h ****   @{
 209:Drivers/CMSIS/Include/cmsis_gcc.h **** */
 210:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 211:Drivers/CMSIS/Include/cmsis_gcc.h **** /* Define macros for porting to both thumb1 and thumb2.
 212:Drivers/CMSIS/Include/cmsis_gcc.h ****  * For thumb1, use low register (r0-r7), specified by constraint "l"
 213:Drivers/CMSIS/Include/cmsis_gcc.h ****  * Otherwise, use general registers, specified by constraint "r" */
 214:Drivers/CMSIS/Include/cmsis_gcc.h **** #if defined (__thumb__) && !defined (__thumb2__)
 215:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_OUT_REG(r) "=l" (r)
 216:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_RW_REG(r) "+l" (r)
 217:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_USE_REG(r) "l" (r)
 218:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 219:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_OUT_REG(r) "=r" (r)
 220:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_RW_REG(r) "+r" (r)
 221:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_USE_REG(r) "r" (r)
 222:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 223:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 224:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 225:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   No Operation
 226:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details No Operation does nothing. This instruction can be used for code alignment purposes.
 227:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 228:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __NOP()                             __ASM volatile ("nop")
 229:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 230:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 231:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Wait For Interrupt
 232:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Wait For Interrupt is a hint instruction that suspends execution until one of a number o
 233:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 234:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __WFI()                             __ASM volatile ("wfi":::"memory")
 235:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 236:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 237:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 238:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Wait For Event
 239:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Wait For Event is a hint instruction that permits the processor to enter
 240:Drivers/CMSIS/Include/cmsis_gcc.h ****            a low-power state until one of a number of events occurs.
 241:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 242:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __WFE()                             __ASM volatile ("wfe":::"memory")
 243:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 244:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 245:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 246:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Send Event
 247:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Send Event is a hint instruction. It causes an event to be signaled to the CPU.
 248:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 249:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __SEV()                             __ASM volatile ("sev")
 250:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 251:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 252:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 253:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Instruction Synchronization Barrier
 254:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Instruction Synchronization Barrier flushes the pipeline in the processor,
 255:Drivers/CMSIS/Include/cmsis_gcc.h ****            so that all instructions following the ISB are fetched from cache or memory,
 256:Drivers/CMSIS/Include/cmsis_gcc.h ****            after the instruction has been completed.
 257:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 258:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __ISB(void)
 259:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 260:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("isb 0xF":::"memory");
ARM GAS  /tmp/ccmoXVAD.s 			page 19


 261:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 262:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 263:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 264:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 265:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Data Synchronization Barrier
 266:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Acts as a special kind of Data Memory Barrier.
 267:Drivers/CMSIS/Include/cmsis_gcc.h ****            It completes when all explicit memory accesses before this instruction complete.
 268:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 269:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __DSB(void)
 270:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 271:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("dsb 0xF":::"memory");
 272:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 273:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 274:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 275:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 276:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Data Memory Barrier
 277:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Ensures the apparent order of the explicit memory operations before
 278:Drivers/CMSIS/Include/cmsis_gcc.h ****            and after the instruction, without ensuring their completion.
 279:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 280:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __DMB(void)
 281:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 282:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("dmb 0xF":::"memory");
 283:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 284:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 285:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 286:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 287:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Reverse byte order (32 bit)
 288:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Reverses the byte order in unsigned integer value. For example, 0x12345678 becomes 0x785
 289:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    value  Value to reverse
 290:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Reversed value
 291:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 292:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __REV(uint32_t value)
 293:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 294:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (__GNUC__ > 4) || (__GNUC__ == 4 && __GNUC_MINOR__ >= 5)
 295:Drivers/CMSIS/Include/cmsis_gcc.h ****   return __builtin_bswap32(value);
 296:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 297:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 298:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 299:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM ("rev %0, %1" : __CMSIS_GCC_OUT_REG (result) : __CMSIS_GCC_USE_REG (value) );
 300:Drivers/CMSIS/Include/cmsis_gcc.h ****   return result;
 301:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 302:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 303:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 304:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 305:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 306:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Reverse byte order (16 bit)
 307:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Reverses the byte order within each halfword of a word. For example, 0x12345678 becomes 
 308:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    value  Value to reverse
 309:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Reversed value
 310:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 311:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __REV16(uint32_t value)
 312:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 313:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 314:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 315:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM ("rev16 %0, %1" : __CMSIS_GCC_OUT_REG (result) : __CMSIS_GCC_USE_REG (value) );
 316:Drivers/CMSIS/Include/cmsis_gcc.h ****   return result;
 317:Drivers/CMSIS/Include/cmsis_gcc.h **** }
ARM GAS  /tmp/ccmoXVAD.s 			page 20


 318:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 319:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 320:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 321:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Reverse byte order (16 bit)
 322:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Reverses the byte order in a 16-bit value and returns the signed 16-bit result. For exam
 323:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    value  Value to reverse
 324:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Reversed value
 325:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 326:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE int16_t __REVSH(int16_t value)
 327:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 328:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (__GNUC__ > 4) || (__GNUC__ == 4 && __GNUC_MINOR__ >= 8)
 329:Drivers/CMSIS/Include/cmsis_gcc.h ****   return (int16_t)__builtin_bswap16(value);
 330:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 331:Drivers/CMSIS/Include/cmsis_gcc.h ****   int16_t result;
 332:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 333:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM ("revsh %0, %1" : __CMSIS_GCC_OUT_REG (result) : __CMSIS_GCC_USE_REG (value) );
 334:Drivers/CMSIS/Include/cmsis_gcc.h ****   return result;
 335:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 336:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 337:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 338:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 339:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 340:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Rotate Right in unsigned value (32 bit)
 341:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Rotate Right (immediate) provides the value of the contents of a register rotated by a v
 342:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    op1  Value to rotate
 343:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    op2  Number of Bits to rotate
 344:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Rotated value
 345:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 346:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __ROR(uint32_t op1, uint32_t op2)
 347:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 348:Drivers/CMSIS/Include/cmsis_gcc.h ****   op2 %= 32U;
 349:Drivers/CMSIS/Include/cmsis_gcc.h ****   if (op2 == 0U)
 350:Drivers/CMSIS/Include/cmsis_gcc.h ****   {
 351:Drivers/CMSIS/Include/cmsis_gcc.h ****     return op1;
 352:Drivers/CMSIS/Include/cmsis_gcc.h ****   }
 353:Drivers/CMSIS/Include/cmsis_gcc.h ****   return (op1 >> op2) | (op1 << (32U - op2));
 354:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 355:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 356:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 357:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 358:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Breakpoint
 359:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Causes the processor to enter Debug state.
 360:Drivers/CMSIS/Include/cmsis_gcc.h ****            Debug tools can use this to investigate system state when the instruction at a particula
 361:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    value  is ignored by the processor.
 362:Drivers/CMSIS/Include/cmsis_gcc.h ****                  If required, a debugger can use it to store additional information about the break
 363:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 364:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __BKPT(value)                       __ASM volatile ("bkpt "#value)
 365:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 366:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 367:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 368:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Reverse bit order of value
 369:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Reverses the bit order of the given value.
 370:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    value  Value to reverse
 371:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Reversed value
 372:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 373:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __RBIT(uint32_t value)
 374:Drivers/CMSIS/Include/cmsis_gcc.h **** {
ARM GAS  /tmp/ccmoXVAD.s 			page 21


 375:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 376:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 377:Drivers/CMSIS/Include/cmsis_gcc.h **** #if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
 378:Drivers/CMSIS/Include/cmsis_gcc.h ****      (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
 379:Drivers/CMSIS/Include/cmsis_gcc.h ****      (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
 380:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 381:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 382:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t s = (4U /*sizeof(v)*/ * 8U) - 1U; /* extra shift needed at end */
 383:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 384:Drivers/CMSIS/Include/cmsis_gcc.h ****   result = value;                      /* r will be reversed bits of v; first get LSB of v */
 385:Drivers/CMSIS/Include/cmsis_gcc.h ****   for (value >>= 1U; value != 0U; value >>= 1U)
 386:Drivers/CMSIS/Include/cmsis_gcc.h ****   {
 387:Drivers/CMSIS/Include/cmsis_gcc.h ****     result <<= 1U;
 388:Drivers/CMSIS/Include/cmsis_gcc.h ****     result |= value & 1U;
 389:Drivers/CMSIS/Include/cmsis_gcc.h ****     s--;
 390:Drivers/CMSIS/Include/cmsis_gcc.h ****   }
 391:Drivers/CMSIS/Include/cmsis_gcc.h ****   result <<= s;                        /* shift when v's highest bits are zero */
 392:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 393:Drivers/CMSIS/Include/cmsis_gcc.h ****   return result;
 394:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 395:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 396:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 397:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 398:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Count leading zeros
 399:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Counts the number of leading zeros of a data value.
 400:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  value  Value to count the leading zeros
 401:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return             number of leading zeros in value
 402:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 403:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint8_t __CLZ(uint32_t value)
 404:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 405:Drivers/CMSIS/Include/cmsis_gcc.h ****   /* Even though __builtin_clz produces a CLZ instruction on ARM, formally
 406:Drivers/CMSIS/Include/cmsis_gcc.h ****      __builtin_clz(0) is undefined behaviour, so handle this case specially.
 407:Drivers/CMSIS/Include/cmsis_gcc.h ****      This guarantees ARM-compatible results if happening to compile on a non-ARM
 408:Drivers/CMSIS/Include/cmsis_gcc.h ****      target, and ensures the compiler doesn't decide to activate any
 409:Drivers/CMSIS/Include/cmsis_gcc.h ****      optimisations using the logic "value was passed to __builtin_clz, so it
 410:Drivers/CMSIS/Include/cmsis_gcc.h ****      is non-zero".
 411:Drivers/CMSIS/Include/cmsis_gcc.h ****      ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
 412:Drivers/CMSIS/Include/cmsis_gcc.h ****      single CLZ instruction.
 413:Drivers/CMSIS/Include/cmsis_gcc.h ****    */
 414:Drivers/CMSIS/Include/cmsis_gcc.h ****   if (value == 0U)
 415:Drivers/CMSIS/Include/cmsis_gcc.h ****   {
 416:Drivers/CMSIS/Include/cmsis_gcc.h ****     return 32U;
 417:Drivers/CMSIS/Include/cmsis_gcc.h ****   }
 418:Drivers/CMSIS/Include/cmsis_gcc.h ****   return __builtin_clz(value);
 419:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 420:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 421:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 422:Drivers/CMSIS/Include/cmsis_gcc.h **** #if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
 423:Drivers/CMSIS/Include/cmsis_gcc.h ****      (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
 424:Drivers/CMSIS/Include/cmsis_gcc.h ****      (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)) || \
 425:Drivers/CMSIS/Include/cmsis_gcc.h ****      (defined (__ARM_ARCH_8M_BASE__ ) && (__ARM_ARCH_8M_BASE__ == 1))    )
 426:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 427:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   LDR Exclusive (8 bit)
 428:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a exclusive LDR instruction for 8 bit value.
 429:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to data
 430:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return             value of type uint8_t at (*ptr)
 431:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
ARM GAS  /tmp/ccmoXVAD.s 			page 22


 432:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint8_t __LDREXB(volatile uint8_t *addr)
 433:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 434:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t result;
 435:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 436:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (__GNUC__ > 4) || (__GNUC__ == 4 && __GNUC_MINOR__ >= 8)
 437:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("ldrexb %0, %1" : "=r" (result) : "Q" (*addr) );
 438:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 439:Drivers/CMSIS/Include/cmsis_gcc.h ****     /* Prior to GCC 4.8, "Q" will be expanded to [rx, #0] which is not
 440:Drivers/CMSIS/Include/cmsis_gcc.h ****        accepted by assembler. So has to use following less efficient pattern.
 441:Drivers/CMSIS/Include/cmsis_gcc.h ****     */
 442:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("ldrexb %0, [%1]" : "=r" (result) : "r" (addr) : "memory" );
 443:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 444:Drivers/CMSIS/Include/cmsis_gcc.h ****    return ((uint8_t) result);    /* Add explicit type cast here */
 445:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 446:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 447:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 448:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 449:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   LDR Exclusive (16 bit)
 450:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a exclusive LDR instruction for 16 bit values.
 451:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to data
 452:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return        value of type uint16_t at (*ptr)
 453:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 454:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint16_t __LDREXH(volatile uint16_t *addr)
 455:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 456:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t result;
 457:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 458:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (__GNUC__ > 4) || (__GNUC__ == 4 && __GNUC_MINOR__ >= 8)
 459:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("ldrexh %0, %1" : "=r" (result) : "Q" (*addr) );
 460:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 461:Drivers/CMSIS/Include/cmsis_gcc.h ****     /* Prior to GCC 4.8, "Q" will be expanded to [rx, #0] which is not
 462:Drivers/CMSIS/Include/cmsis_gcc.h ****        accepted by assembler. So has to use following less efficient pattern.
 463:Drivers/CMSIS/Include/cmsis_gcc.h ****     */
 464:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("ldrexh %0, [%1]" : "=r" (result) : "r" (addr) : "memory" );
 465:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 466:Drivers/CMSIS/Include/cmsis_gcc.h ****    return ((uint16_t) result);    /* Add explicit type cast here */
 467:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 468:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 469:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 470:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 471:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   LDR Exclusive (32 bit)
 472:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a exclusive LDR instruction for 32 bit values.
 473:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to data
 474:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return        value of type uint32_t at (*ptr)
 475:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 476:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
 477:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 478:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t result;
 479:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 480:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 481:Drivers/CMSIS/Include/cmsis_gcc.h ****    return(result);
 482:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 483:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 484:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 485:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 486:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   STR Exclusive (8 bit)
 487:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a exclusive STR instruction for 8 bit values.
 488:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  value  Value to store
ARM GAS  /tmp/ccmoXVAD.s 			page 23


 489:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to location
 490:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return          0  Function succeeded
 491:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return          1  Function failed
 492:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 493:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __STREXB(uint8_t value, volatile uint8_t *addr)
 494:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 495:Drivers/CMSIS/Include/cmsis_gcc.h ****    uint32_t result;
 496:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 497:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("strexb %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" ((uint32_t)value) );
 498:Drivers/CMSIS/Include/cmsis_gcc.h ****    return(result);
 499:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 500:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 501:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 502:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 503:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   STR Exclusive (16 bit)
 504:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a exclusive STR instruction for 16 bit values.
 505:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  value  Value to store
 506:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to location
 507:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return          0  Function succeeded
 508:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return          1  Function failed
 509:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 510:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __STREXH(uint16_t value, volatile uint16_t *addr)
 511:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 512:Drivers/CMSIS/Include/cmsis_gcc.h ****    uint32_t result;
 513:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 514:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("strexh %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" ((uint32_t)value) );
 515:Drivers/CMSIS/Include/cmsis_gcc.h ****    return(result);
 516:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 517:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 518:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 519:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 520:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   STR Exclusive (32 bit)
 521:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a exclusive STR instruction for 32 bit values.
 522:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  value  Value to store
 523:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to location
 524:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return          0  Function succeeded
 525:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return          1  Function failed
 526:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 527:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
 528:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 529:Drivers/CMSIS/Include/cmsis_gcc.h ****    uint32_t result;
 530:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 531:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 532:Drivers/CMSIS/Include/cmsis_gcc.h ****    return(result);
 533:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 534:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 535:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 536:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 537:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Remove the exclusive lock
 538:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Removes the exclusive lock which is created by LDREX.
 539:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 540:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __CLREX(void)
 541:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 542:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("clrex" ::: "memory");
 543:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 544:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 545:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif /* ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
ARM GAS  /tmp/ccmoXVAD.s 			page 24


 546:Drivers/CMSIS/Include/cmsis_gcc.h ****            (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
 547:Drivers/CMSIS/Include/cmsis_gcc.h ****            (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)) || \
 548:Drivers/CMSIS/Include/cmsis_gcc.h ****            (defined (__ARM_ARCH_8M_BASE__ ) && (__ARM_ARCH_8M_BASE__ == 1))    ) */
 549:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 550:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 551:Drivers/CMSIS/Include/cmsis_gcc.h **** #if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
 552:Drivers/CMSIS/Include/cmsis_gcc.h ****      (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
 553:Drivers/CMSIS/Include/cmsis_gcc.h ****      (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
 554:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 555:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Signed Saturate
 556:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Saturates a signed value.
 557:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  ARG1  Value to be saturated
 558:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  ARG2  Bit position to saturate to (1..32)
 559:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return             Saturated value
 560:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 561:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __SSAT(ARG1, ARG2) \
 562:Drivers/CMSIS/Include/cmsis_gcc.h **** __extension__ \
 563:Drivers/CMSIS/Include/cmsis_gcc.h **** ({                          \
 564:Drivers/CMSIS/Include/cmsis_gcc.h ****   int32_t __RES, __ARG1 = (ARG1); \
 565:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("ssat %0, %1, %2" : "=r" (__RES) :  "I" (ARG2), "r" (__ARG1) : "cc" ); \
 566:Drivers/CMSIS/Include/cmsis_gcc.h ****   __RES; \
 567:Drivers/CMSIS/Include/cmsis_gcc.h ****  })
 568:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 569:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 570:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 571:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Unsigned Saturate
 572:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Saturates an unsigned value.
 573:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  ARG1  Value to be saturated
 574:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  ARG2  Bit position to saturate to (0..31)
 575:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return             Saturated value
 576:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 577:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __USAT(ARG1, ARG2) \
 578:Drivers/CMSIS/Include/cmsis_gcc.h **** __extension__ \
 579:Drivers/CMSIS/Include/cmsis_gcc.h **** ({                          \
 580:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t __RES, __ARG1 = (ARG1); \
 581:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("usat %0, %1, %2" : "=r" (__RES) :  "I" (ARG2), "r" (__ARG1) : "cc" ); \
 582:Drivers/CMSIS/Include/cmsis_gcc.h ****   __RES; \
 583:Drivers/CMSIS/Include/cmsis_gcc.h ****  })
 584:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 585:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 586:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 587:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Rotate Right with Extend (32 bit)
 588:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Moves each bit of a bitstring right by one bit.
 589:Drivers/CMSIS/Include/cmsis_gcc.h ****            The carry input is shifted in at the left end of the bitstring.
 590:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    value  Value to rotate
 591:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Rotated value
 592:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 593:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __RRX(uint32_t value)
 594:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 595:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 596:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 597:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("rrx %0, %1" : __CMSIS_GCC_OUT_REG (result) : __CMSIS_GCC_USE_REG (value) );
 598:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 599:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 600:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 601:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 602:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
ARM GAS  /tmp/ccmoXVAD.s 			page 25


 603:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   LDRT Unprivileged (8 bit)
 604:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a Unprivileged LDRT instruction for 8 bit value.
 605:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to data
 606:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return             value of type uint8_t at (*ptr)
 607:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 608:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint8_t __LDRBT(volatile uint8_t *ptr)
 609:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 610:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t result;
 611:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 612:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (__GNUC__ > 4) || (__GNUC__ == 4 && __GNUC_MINOR__ >= 8)
 613:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("ldrbt %0, %1" : "=r" (result) : "Q" (*ptr) );
 614:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 615:Drivers/CMSIS/Include/cmsis_gcc.h ****     /* Prior to GCC 4.8, "Q" will be expanded to [rx, #0] which is not
 616:Drivers/CMSIS/Include/cmsis_gcc.h ****        accepted by assembler. So has to use following less efficient pattern.
 617:Drivers/CMSIS/Include/cmsis_gcc.h ****     */
 618:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("ldrbt %0, [%1]" : "=r" (result) : "r" (ptr) : "memory" );
 619:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 620:Drivers/CMSIS/Include/cmsis_gcc.h ****    return ((uint8_t) result);    /* Add explicit type cast here */
 621:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 622:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 623:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 624:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 625:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   LDRT Unprivileged (16 bit)
 626:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a Unprivileged LDRT instruction for 16 bit values.
 627:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to data
 628:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return        value of type uint16_t at (*ptr)
 629:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 630:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint16_t __LDRHT(volatile uint16_t *ptr)
 631:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 632:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t result;
 633:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 634:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (__GNUC__ > 4) || (__GNUC__ == 4 && __GNUC_MINOR__ >= 8)
 635:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("ldrht %0, %1" : "=r" (result) : "Q" (*ptr) );
 636:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 637:Drivers/CMSIS/Include/cmsis_gcc.h ****     /* Prior to GCC 4.8, "Q" will be expanded to [rx, #0] which is not
 638:Drivers/CMSIS/Include/cmsis_gcc.h ****        accepted by assembler. So has to use following less efficient pattern.
 639:Drivers/CMSIS/Include/cmsis_gcc.h ****     */
 640:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("ldrht %0, [%1]" : "=r" (result) : "r" (ptr) : "memory" );
 641:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 642:Drivers/CMSIS/Include/cmsis_gcc.h ****    return ((uint16_t) result);    /* Add explicit type cast here */
 643:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 644:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 645:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 646:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 647:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   LDRT Unprivileged (32 bit)
 648:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a Unprivileged LDRT instruction for 32 bit values.
 649:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to data
 650:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return        value of type uint32_t at (*ptr)
 651:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 652:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __LDRT(volatile uint32_t *ptr)
 653:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 654:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t result;
 655:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 656:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("ldrt %0, %1" : "=r" (result) : "Q" (*ptr) );
 657:Drivers/CMSIS/Include/cmsis_gcc.h ****    return(result);
 658:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 659:Drivers/CMSIS/Include/cmsis_gcc.h **** 
ARM GAS  /tmp/ccmoXVAD.s 			page 26


 660:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 661:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 662:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   STRT Unprivileged (8 bit)
 663:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a Unprivileged STRT instruction for 8 bit values.
 664:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  value  Value to store
 665:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to location
 666:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 667:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __STRBT(uint8_t value, volatile uint8_t *ptr)
 668:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 669:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("strbt %1, %0" : "=Q" (*ptr) : "r" ((uint32_t)value) );
 670:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 671:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 672:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 673:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 674:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   STRT Unprivileged (16 bit)
 675:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a Unprivileged STRT instruction for 16 bit values.
 676:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  value  Value to store
 677:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to location
 678:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 679:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __STRHT(uint16_t value, volatile uint16_t *ptr)
 680:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 681:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("strht %1, %0" : "=Q" (*ptr) : "r" ((uint32_t)value) );
 682:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 683:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 684:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 685:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 686:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   STRT Unprivileged (32 bit)
 687:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a Unprivileged STRT instruction for 32 bit values.
 688:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  value  Value to store
 689:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to location
 690:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 691:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __STRT(uint32_t value, volatile uint32_t *ptr)
 692:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 693:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("strt %1, %0" : "=Q" (*ptr) : "r" (value) );
 694:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 695:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 696:Drivers/CMSIS/Include/cmsis_gcc.h **** #else  /* ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
 697:Drivers/CMSIS/Include/cmsis_gcc.h ****            (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
 698:Drivers/CMSIS/Include/cmsis_gcc.h ****            (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    ) */
 699:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 700:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 701:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Signed Saturate
 702:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Saturates a signed value.
 703:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  value  Value to be saturated
 704:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    sat  Bit position to saturate to (1..32)
 705:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return             Saturated value
 706:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 707:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE int32_t __SSAT(int32_t val, uint32_t sat)
 708:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 709:Drivers/CMSIS/Include/cmsis_gcc.h ****   if ((sat >= 1U) && (sat <= 32U))
 710:Drivers/CMSIS/Include/cmsis_gcc.h ****   {
 711:Drivers/CMSIS/Include/cmsis_gcc.h ****     const int32_t max = (int32_t)((1U << (sat - 1U)) - 1U);
 712:Drivers/CMSIS/Include/cmsis_gcc.h ****     const int32_t min = -1 - max ;
 713:Drivers/CMSIS/Include/cmsis_gcc.h ****     if (val > max)
 714:Drivers/CMSIS/Include/cmsis_gcc.h ****     {
 715:Drivers/CMSIS/Include/cmsis_gcc.h ****       return max;
 716:Drivers/CMSIS/Include/cmsis_gcc.h ****     }
ARM GAS  /tmp/ccmoXVAD.s 			page 27


 717:Drivers/CMSIS/Include/cmsis_gcc.h ****     else if (val < min)
 718:Drivers/CMSIS/Include/cmsis_gcc.h ****     {
 719:Drivers/CMSIS/Include/cmsis_gcc.h ****       return min;
 720:Drivers/CMSIS/Include/cmsis_gcc.h ****     }
 721:Drivers/CMSIS/Include/cmsis_gcc.h ****   }
 722:Drivers/CMSIS/Include/cmsis_gcc.h ****   return val;
 723:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 724:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 725:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 726:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Unsigned Saturate
 727:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Saturates an unsigned value.
 728:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  value  Value to be saturated
 729:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    sat  Bit position to saturate to (0..31)
 730:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return             Saturated value
 731:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 732:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __USAT(int32_t val, uint32_t sat)
 733:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 734:Drivers/CMSIS/Include/cmsis_gcc.h ****   if (sat <= 31U)
 735:Drivers/CMSIS/Include/cmsis_gcc.h ****   {
 736:Drivers/CMSIS/Include/cmsis_gcc.h ****     const uint32_t max = ((1U << sat) - 1U);
 737:Drivers/CMSIS/Include/cmsis_gcc.h ****     if (val > (int32_t)max)
 738:Drivers/CMSIS/Include/cmsis_gcc.h ****     {
 739:Drivers/CMSIS/Include/cmsis_gcc.h ****       return max;
 740:Drivers/CMSIS/Include/cmsis_gcc.h ****     }
 741:Drivers/CMSIS/Include/cmsis_gcc.h ****     else if (val < 0)
 742:Drivers/CMSIS/Include/cmsis_gcc.h ****     {
 743:Drivers/CMSIS/Include/cmsis_gcc.h ****       return 0U;
 744:Drivers/CMSIS/Include/cmsis_gcc.h ****     }
 745:Drivers/CMSIS/Include/cmsis_gcc.h ****   }
 746:Drivers/CMSIS/Include/cmsis_gcc.h ****   return (uint32_t)val;
 747:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 748:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 749:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif /* ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
 750:Drivers/CMSIS/Include/cmsis_gcc.h ****            (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
 751:Drivers/CMSIS/Include/cmsis_gcc.h ****            (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    ) */
 752:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 753:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 754:Drivers/CMSIS/Include/cmsis_gcc.h **** #if ((defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)) || \
 755:Drivers/CMSIS/Include/cmsis_gcc.h ****      (defined (__ARM_ARCH_8M_BASE__ ) && (__ARM_ARCH_8M_BASE__ == 1))    )
 756:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 757:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Load-Acquire (8 bit)
 758:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a LDAB instruction for 8 bit value.
 759:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to data
 760:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return             value of type uint8_t at (*ptr)
 761:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 762:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint8_t __LDAB(volatile uint8_t *ptr)
 763:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 764:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t result;
 765:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 766:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("ldab %0, %1" : "=r" (result) : "Q" (*ptr) : "memory" );
 767:Drivers/CMSIS/Include/cmsis_gcc.h ****    return ((uint8_t) result);
 768:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 769:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 770:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 771:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 772:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Load-Acquire (16 bit)
 773:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a LDAH instruction for 16 bit values.
ARM GAS  /tmp/ccmoXVAD.s 			page 28


 774:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to data
 775:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return        value of type uint16_t at (*ptr)
 776:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 777:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint16_t __LDAH(volatile uint16_t *ptr)
 778:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 779:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t result;
 780:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 781:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("ldah %0, %1" : "=r" (result) : "Q" (*ptr) : "memory" );
 782:Drivers/CMSIS/Include/cmsis_gcc.h ****    return ((uint16_t) result);
 783:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 784:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 785:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 786:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 787:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Load-Acquire (32 bit)
 788:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a LDA instruction for 32 bit values.
 789:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to data
 790:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return        value of type uint32_t at (*ptr)
 791:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 792:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __LDA(volatile uint32_t *ptr)
 793:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 794:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t result;
 795:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 796:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("lda %0, %1" : "=r" (result) : "Q" (*ptr) : "memory" );
 797:Drivers/CMSIS/Include/cmsis_gcc.h ****    return(result);
 798:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 799:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 800:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 801:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 802:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Store-Release (8 bit)
 803:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a STLB instruction for 8 bit values.
 804:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  value  Value to store
 805:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to location
 806:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 807:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __STLB(uint8_t value, volatile uint8_t *ptr)
 808:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 809:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("stlb %1, %0" : "=Q" (*ptr) : "r" ((uint32_t)value) : "memory" );
 810:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 811:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 812:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 813:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 814:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Store-Release (16 bit)
 815:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a STLH instruction for 16 bit values.
 816:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  value  Value to store
 817:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to location
 818:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 819:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __STLH(uint16_t value, volatile uint16_t *ptr)
 820:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 821:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("stlh %1, %0" : "=Q" (*ptr) : "r" ((uint32_t)value) : "memory" );
 822:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 823:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 824:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 825:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 826:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Store-Release (32 bit)
 827:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a STL instruction for 32 bit values.
 828:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  value  Value to store
 829:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to location
 830:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
ARM GAS  /tmp/ccmoXVAD.s 			page 29


 831:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __STL(uint32_t value, volatile uint32_t *ptr)
 832:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 833:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("stl %1, %0" : "=Q" (*ptr) : "r" ((uint32_t)value) : "memory" );
 834:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 835:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 836:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 837:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 838:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Load-Acquire Exclusive (8 bit)
 839:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a LDAB exclusive instruction for 8 bit value.
 840:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to data
 841:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return             value of type uint8_t at (*ptr)
 842:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 843:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint8_t __LDAEXB(volatile uint8_t *ptr)
 844:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 845:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t result;
 846:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 847:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("ldaexb %0, %1" : "=r" (result) : "Q" (*ptr) : "memory" );
 848:Drivers/CMSIS/Include/cmsis_gcc.h ****    return ((uint8_t) result);
 849:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 850:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 851:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 852:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 853:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Load-Acquire Exclusive (16 bit)
 854:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a LDAH exclusive instruction for 16 bit values.
 855:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to data
 856:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return        value of type uint16_t at (*ptr)
 857:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 858:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint16_t __LDAEXH(volatile uint16_t *ptr)
 859:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 860:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t result;
 861:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 862:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("ldaexh %0, %1" : "=r" (result) : "Q" (*ptr) : "memory" );
 863:Drivers/CMSIS/Include/cmsis_gcc.h ****    return ((uint16_t) result);
 864:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 865:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 866:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 867:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 868:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Load-Acquire Exclusive (32 bit)
 869:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a LDA exclusive instruction for 32 bit values.
 870:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to data
 871:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return        value of type uint32_t at (*ptr)
 872:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 873:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __LDAEX(volatile uint32_t *ptr)
 874:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 875:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t result;
 876:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 877:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("ldaex %0, %1" : "=r" (result) : "Q" (*ptr) : "memory" );
 878:Drivers/CMSIS/Include/cmsis_gcc.h ****    return(result);
 879:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 880:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 881:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 882:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 883:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Store-Release Exclusive (8 bit)
 884:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a STLB exclusive instruction for 8 bit values.
 885:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  value  Value to store
 886:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to location
 887:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return          0  Function succeeded
ARM GAS  /tmp/ccmoXVAD.s 			page 30


 888:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return          1  Function failed
 889:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 890:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __STLEXB(uint8_t value, volatile uint8_t *ptr)
 891:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 892:Drivers/CMSIS/Include/cmsis_gcc.h ****    uint32_t result;
 893:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 894:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("stlexb %0, %2, %1" : "=&r" (result), "=Q" (*ptr) : "r" ((uint32_t)value) : "mem
 895:Drivers/CMSIS/Include/cmsis_gcc.h ****    return(result);
 896:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 897:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 898:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 899:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 900:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Store-Release Exclusive (16 bit)
 901:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a STLH exclusive instruction for 16 bit values.
 902:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  value  Value to store
 903:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to location
 904:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return          0  Function succeeded
 905:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return          1  Function failed
 906:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 907:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __STLEXH(uint16_t value, volatile uint16_t *ptr)
 908:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 909:Drivers/CMSIS/Include/cmsis_gcc.h ****    uint32_t result;
 910:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 911:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("stlexh %0, %2, %1" : "=&r" (result), "=Q" (*ptr) : "r" ((uint32_t)value) : "mem
 912:Drivers/CMSIS/Include/cmsis_gcc.h ****    return(result);
 913:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 914:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 915:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 916:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 917:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Store-Release Exclusive (32 bit)
 918:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a STL exclusive instruction for 32 bit values.
 919:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  value  Value to store
 920:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to location
 921:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return          0  Function succeeded
 922:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return          1  Function failed
 923:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 924:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __STLEX(uint32_t value, volatile uint32_t *ptr)
 925:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 926:Drivers/CMSIS/Include/cmsis_gcc.h ****    uint32_t result;
 927:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 928:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("stlex %0, %2, %1" : "=&r" (result), "=Q" (*ptr) : "r" ((uint32_t)value) : "memo
 929:Drivers/CMSIS/Include/cmsis_gcc.h ****    return(result);
 930:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 931:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 932:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif /* ((defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)) || \
 933:Drivers/CMSIS/Include/cmsis_gcc.h ****            (defined (__ARM_ARCH_8M_BASE__ ) && (__ARM_ARCH_8M_BASE__ == 1))    ) */
 934:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 935:Drivers/CMSIS/Include/cmsis_gcc.h **** /*@}*/ /* end of group CMSIS_Core_InstructionInterface */
 936:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 937:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 938:Drivers/CMSIS/Include/cmsis_gcc.h **** /* ###########################  Core Function Access  ########################### */
 939:Drivers/CMSIS/Include/cmsis_gcc.h **** /** \ingroup  CMSIS_Core_FunctionInterface
 940:Drivers/CMSIS/Include/cmsis_gcc.h ****     \defgroup CMSIS_Core_RegAccFunctions CMSIS Core Register Access Functions
 941:Drivers/CMSIS/Include/cmsis_gcc.h ****   @{
 942:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 943:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 944:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
ARM GAS  /tmp/ccmoXVAD.s 			page 31


 945:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Enable IRQ Interrupts
 946:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Enables IRQ interrupts by clearing special-purpose register PRIMASK.
 947:Drivers/CMSIS/Include/cmsis_gcc.h ****            Can only be executed in Privileged modes.
 948:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 949:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __enable_irq(void)
 950:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 951:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("cpsie i" : : : "memory");
 952:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 953:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 954:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 955:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 956:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Disable IRQ Interrupts
 957:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
 958:Drivers/CMSIS/Include/cmsis_gcc.h ****            Can only be executed in Privileged modes.
 959:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 960:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __disable_irq(void)
 216              		.loc 2 960 27 view .LVU57
 217              	.LBB9:
 961:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 962:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("cpsid i" : : : "memory");
 218              		.loc 2 962 3 view .LVU58
 219              		.syntax unified
 220              	@ 962 "Drivers/CMSIS/Include/cmsis_gcc.h" 1
 221 0000 72B6     		cpsid i
 222              	@ 0 "" 2
 223              		.thumb
 224              		.syntax unified
 225              	.L6:
 226              	.LBE9:
 227              	.LBE8:
 555:Core/Src/main.c ****   while (1)
 228              		.loc 1 555 3 view .LVU59
 556:Core/Src/main.c ****   {
 557:Core/Src/main.c ****   }
 229              		.loc 1 557 3 view .LVU60
 555:Core/Src/main.c ****   while (1)
 230              		.loc 1 555 9 view .LVU61
 231 0002 FEE7     		b	.L6
 232              		.cfi_endproc
 233              	.LFE229:
 235              		.section	.text.MX_ADC1_Init,"ax",%progbits
 236              		.align	1
 237              		.syntax unified
 238              		.thumb
 239              		.thumb_func
 241              	MX_ADC1_Init:
 242              	.LFB222:
 190:Core/Src/main.c **** 
 243              		.loc 1 190 1 view -0
 244              		.cfi_startproc
 245              		@ args = 0, pretend = 0, frame = 16
 246              		@ frame_needed = 0, uses_anonymous_args = 0
 247 0000 00B5     		push	{lr}
 248              	.LCFI3:
 249              		.cfi_def_cfa_offset 4
 250              		.cfi_offset 14, -4
 251 0002 85B0     		sub	sp, sp, #20
ARM GAS  /tmp/ccmoXVAD.s 			page 32


 252              	.LCFI4:
 253              		.cfi_def_cfa_offset 24
 196:Core/Src/main.c **** 
 254              		.loc 1 196 3 view .LVU63
 196:Core/Src/main.c **** 
 255              		.loc 1 196 26 is_stmt 0 view .LVU64
 256 0004 0023     		movs	r3, #0
 257 0006 0093     		str	r3, [sp]
 258 0008 0193     		str	r3, [sp, #4]
 259 000a 0293     		str	r3, [sp, #8]
 260 000c 0393     		str	r3, [sp, #12]
 204:Core/Src/main.c ****   hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 261              		.loc 1 204 3 is_stmt 1 view .LVU65
 204:Core/Src/main.c ****   hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 262              		.loc 1 204 18 is_stmt 0 view .LVU66
 263 000e 1448     		ldr	r0, .L13
 264 0010 144A     		ldr	r2, .L13+4
 265 0012 0260     		str	r2, [r0]
 205:Core/Src/main.c ****   hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 266              		.loc 1 205 3 is_stmt 1 view .LVU67
 205:Core/Src/main.c ****   hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 267              		.loc 1 205 29 is_stmt 0 view .LVU68
 268 0014 4FF48032 		mov	r2, #65536
 269 0018 4260     		str	r2, [r0, #4]
 206:Core/Src/main.c ****   hadc1.Init.ScanConvMode = DISABLE;
 270              		.loc 1 206 3 is_stmt 1 view .LVU69
 206:Core/Src/main.c ****   hadc1.Init.ScanConvMode = DISABLE;
 271              		.loc 1 206 25 is_stmt 0 view .LVU70
 272 001a 8360     		str	r3, [r0, #8]
 207:Core/Src/main.c ****   hadc1.Init.ContinuousConvMode = DISABLE;
 273              		.loc 1 207 3 is_stmt 1 view .LVU71
 207:Core/Src/main.c ****   hadc1.Init.ContinuousConvMode = DISABLE;
 274              		.loc 1 207 27 is_stmt 0 view .LVU72
 275 001c 0361     		str	r3, [r0, #16]
 208:Core/Src/main.c ****   hadc1.Init.DiscontinuousConvMode = DISABLE;
 276              		.loc 1 208 3 is_stmt 1 view .LVU73
 208:Core/Src/main.c ****   hadc1.Init.DiscontinuousConvMode = DISABLE;
 277              		.loc 1 208 33 is_stmt 0 view .LVU74
 278 001e 0376     		strb	r3, [r0, #24]
 209:Core/Src/main.c ****   hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 279              		.loc 1 209 3 is_stmt 1 view .LVU75
 209:Core/Src/main.c ****   hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 280              		.loc 1 209 36 is_stmt 0 view .LVU76
 281 0020 80F82030 		strb	r3, [r0, #32]
 210:Core/Src/main.c ****   hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 282              		.loc 1 210 3 is_stmt 1 view .LVU77
 210:Core/Src/main.c ****   hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 283              		.loc 1 210 35 is_stmt 0 view .LVU78
 284 0024 C362     		str	r3, [r0, #44]
 211:Core/Src/main.c ****   hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 285              		.loc 1 211 3 is_stmt 1 view .LVU79
 211:Core/Src/main.c ****   hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 286              		.loc 1 211 31 is_stmt 0 view .LVU80
 287 0026 104A     		ldr	r2, .L13+8
 288 0028 8262     		str	r2, [r0, #40]
 212:Core/Src/main.c ****   hadc1.Init.NbrOfConversion = 1;
 289              		.loc 1 212 3 is_stmt 1 view .LVU81
ARM GAS  /tmp/ccmoXVAD.s 			page 33


 212:Core/Src/main.c ****   hadc1.Init.NbrOfConversion = 1;
 290              		.loc 1 212 24 is_stmt 0 view .LVU82
 291 002a C360     		str	r3, [r0, #12]
 213:Core/Src/main.c ****   hadc1.Init.DMAContinuousRequests = DISABLE;
 292              		.loc 1 213 3 is_stmt 1 view .LVU83
 213:Core/Src/main.c ****   hadc1.Init.DMAContinuousRequests = DISABLE;
 293              		.loc 1 213 30 is_stmt 0 view .LVU84
 294 002c 0122     		movs	r2, #1
 295 002e C261     		str	r2, [r0, #28]
 214:Core/Src/main.c ****   hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 296              		.loc 1 214 3 is_stmt 1 view .LVU85
 214:Core/Src/main.c ****   hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 297              		.loc 1 214 36 is_stmt 0 view .LVU86
 298 0030 80F83030 		strb	r3, [r0, #48]
 215:Core/Src/main.c ****   if (HAL_ADC_Init(&hadc1) != HAL_OK)
 299              		.loc 1 215 3 is_stmt 1 view .LVU87
 215:Core/Src/main.c ****   if (HAL_ADC_Init(&hadc1) != HAL_OK)
 300              		.loc 1 215 27 is_stmt 0 view .LVU88
 301 0034 4261     		str	r2, [r0, #20]
 216:Core/Src/main.c ****   {
 302              		.loc 1 216 3 is_stmt 1 view .LVU89
 216:Core/Src/main.c ****   {
 303              		.loc 1 216 7 is_stmt 0 view .LVU90
 304 0036 FFF7FEFF 		bl	HAL_ADC_Init
 305              	.LVL5:
 216:Core/Src/main.c ****   {
 306              		.loc 1 216 6 discriminator 1 view .LVU91
 307 003a 68B9     		cbnz	r0, .L11
 223:Core/Src/main.c ****   sConfig.Rank = 1;
 308              		.loc 1 223 3 is_stmt 1 view .LVU92
 223:Core/Src/main.c ****   sConfig.Rank = 1;
 309              		.loc 1 223 19 is_stmt 0 view .LVU93
 310 003c 0823     		movs	r3, #8
 311 003e 0093     		str	r3, [sp]
 224:Core/Src/main.c ****   sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 312              		.loc 1 224 3 is_stmt 1 view .LVU94
 224:Core/Src/main.c ****   sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 313              		.loc 1 224 16 is_stmt 0 view .LVU95
 314 0040 0123     		movs	r3, #1
 315 0042 0193     		str	r3, [sp, #4]
 225:Core/Src/main.c ****   if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 316              		.loc 1 225 3 is_stmt 1 view .LVU96
 225:Core/Src/main.c ****   if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 317              		.loc 1 225 24 is_stmt 0 view .LVU97
 318 0044 0023     		movs	r3, #0
 319 0046 0293     		str	r3, [sp, #8]
 226:Core/Src/main.c ****   {
 320              		.loc 1 226 3 is_stmt 1 view .LVU98
 226:Core/Src/main.c ****   {
 321              		.loc 1 226 7 is_stmt 0 view .LVU99
 322 0048 6946     		mov	r1, sp
 323 004a 0548     		ldr	r0, .L13
 324 004c FFF7FEFF 		bl	HAL_ADC_ConfigChannel
 325              	.LVL6:
 226:Core/Src/main.c ****   {
 326              		.loc 1 226 6 discriminator 1 view .LVU100
 327 0050 20B9     		cbnz	r0, .L12
ARM GAS  /tmp/ccmoXVAD.s 			page 34


 234:Core/Src/main.c **** 
 328              		.loc 1 234 1 view .LVU101
 329 0052 05B0     		add	sp, sp, #20
 330              	.LCFI5:
 331              		.cfi_remember_state
 332              		.cfi_def_cfa_offset 4
 333              		@ sp needed
 334 0054 5DF804FB 		ldr	pc, [sp], #4
 335              	.L11:
 336              	.LCFI6:
 337              		.cfi_restore_state
 218:Core/Src/main.c ****   }
 338              		.loc 1 218 5 is_stmt 1 view .LVU102
 339 0058 FFF7FEFF 		bl	Error_Handler
 340              	.LVL7:
 341              	.L12:
 228:Core/Src/main.c ****   }
 342              		.loc 1 228 5 view .LVU103
 343 005c FFF7FEFF 		bl	Error_Handler
 344              	.LVL8:
 345              	.L14:
 346              		.align	2
 347              	.L13:
 348 0060 00000000 		.word	hadc1
 349 0064 00200140 		.word	1073815552
 350 0068 0100000F 		.word	251658241
 351              		.cfi_endproc
 352              	.LFE222:
 354              		.section	.text.MX_TIM2_Init,"ax",%progbits
 355              		.align	1
 356              		.syntax unified
 357              		.thumb
 358              		.thumb_func
 360              	MX_TIM2_Init:
 361              	.LFB224:
 276:Core/Src/main.c **** 
 362              		.loc 1 276 1 view -0
 363              		.cfi_startproc
 364              		@ args = 0, pretend = 0, frame = 40
 365              		@ frame_needed = 0, uses_anonymous_args = 0
 366 0000 00B5     		push	{lr}
 367              	.LCFI7:
 368              		.cfi_def_cfa_offset 4
 369              		.cfi_offset 14, -4
 370 0002 8BB0     		sub	sp, sp, #44
 371              	.LCFI8:
 372              		.cfi_def_cfa_offset 48
 282:Core/Src/main.c ****   TIM_MasterConfigTypeDef sMasterConfig = {0};
 373              		.loc 1 282 3 view .LVU105
 282:Core/Src/main.c ****   TIM_MasterConfigTypeDef sMasterConfig = {0};
 374              		.loc 1 282 26 is_stmt 0 view .LVU106
 375 0004 0023     		movs	r3, #0
 376 0006 0693     		str	r3, [sp, #24]
 377 0008 0793     		str	r3, [sp, #28]
 378 000a 0893     		str	r3, [sp, #32]
 379 000c 0993     		str	r3, [sp, #36]
 283:Core/Src/main.c ****   TIM_IC_InitTypeDef sConfigIC = {0};
ARM GAS  /tmp/ccmoXVAD.s 			page 35


 380              		.loc 1 283 3 is_stmt 1 view .LVU107
 283:Core/Src/main.c ****   TIM_IC_InitTypeDef sConfigIC = {0};
 381              		.loc 1 283 27 is_stmt 0 view .LVU108
 382 000e 0493     		str	r3, [sp, #16]
 383 0010 0593     		str	r3, [sp, #20]
 284:Core/Src/main.c **** 
 384              		.loc 1 284 3 is_stmt 1 view .LVU109
 284:Core/Src/main.c **** 
 385              		.loc 1 284 22 is_stmt 0 view .LVU110
 386 0012 0093     		str	r3, [sp]
 387 0014 0193     		str	r3, [sp, #4]
 388 0016 0293     		str	r3, [sp, #8]
 389 0018 0393     		str	r3, [sp, #12]
 289:Core/Src/main.c ****   htim2.Init.Prescaler = 99;
 390              		.loc 1 289 3 is_stmt 1 view .LVU111
 289:Core/Src/main.c ****   htim2.Init.Prescaler = 99;
 391              		.loc 1 289 18 is_stmt 0 view .LVU112
 392 001a 2548     		ldr	r0, .L31
 393 001c 4FF08042 		mov	r2, #1073741824
 394 0020 0260     		str	r2, [r0]
 290:Core/Src/main.c ****   htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 395              		.loc 1 290 3 is_stmt 1 view .LVU113
 290:Core/Src/main.c ****   htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 396              		.loc 1 290 24 is_stmt 0 view .LVU114
 397 0022 6322     		movs	r2, #99
 398 0024 4260     		str	r2, [r0, #4]
 291:Core/Src/main.c ****   htim2.Init.Period = 4294967295;
 399              		.loc 1 291 3 is_stmt 1 view .LVU115
 291:Core/Src/main.c ****   htim2.Init.Period = 4294967295;
 400              		.loc 1 291 26 is_stmt 0 view .LVU116
 401 0026 8360     		str	r3, [r0, #8]
 292:Core/Src/main.c ****   htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 402              		.loc 1 292 3 is_stmt 1 view .LVU117
 292:Core/Src/main.c ****   htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 403              		.loc 1 292 21 is_stmt 0 view .LVU118
 404 0028 4FF0FF32 		mov	r2, #-1
 405 002c C260     		str	r2, [r0, #12]
 293:Core/Src/main.c ****   htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 406              		.loc 1 293 3 is_stmt 1 view .LVU119
 293:Core/Src/main.c ****   htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 407              		.loc 1 293 28 is_stmt 0 view .LVU120
 408 002e 0361     		str	r3, [r0, #16]
 294:Core/Src/main.c ****   if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 409              		.loc 1 294 3 is_stmt 1 view .LVU121
 294:Core/Src/main.c ****   if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 410              		.loc 1 294 32 is_stmt 0 view .LVU122
 411 0030 8361     		str	r3, [r0, #24]
 295:Core/Src/main.c ****   {
 412              		.loc 1 295 3 is_stmt 1 view .LVU123
 295:Core/Src/main.c ****   {
 413              		.loc 1 295 7 is_stmt 0 view .LVU124
 414 0032 FFF7FEFF 		bl	HAL_TIM_Base_Init
 415              	.LVL9:
 295:Core/Src/main.c ****   {
 416              		.loc 1 295 6 discriminator 1 view .LVU125
 417 0036 68BB     		cbnz	r0, .L24
 299:Core/Src/main.c ****   if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
ARM GAS  /tmp/ccmoXVAD.s 			page 36


 418              		.loc 1 299 3 is_stmt 1 view .LVU126
 299:Core/Src/main.c ****   if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 419              		.loc 1 299 34 is_stmt 0 view .LVU127
 420 0038 4FF48053 		mov	r3, #4096
 421 003c 0693     		str	r3, [sp, #24]
 300:Core/Src/main.c ****   {
 422              		.loc 1 300 3 is_stmt 1 view .LVU128
 300:Core/Src/main.c ****   {
 423              		.loc 1 300 7 is_stmt 0 view .LVU129
 424 003e 06A9     		add	r1, sp, #24
 425 0040 1B48     		ldr	r0, .L31
 426 0042 FFF7FEFF 		bl	HAL_TIM_ConfigClockSource
 427              	.LVL10:
 300:Core/Src/main.c ****   {
 428              		.loc 1 300 6 discriminator 1 view .LVU130
 429 0046 38BB     		cbnz	r0, .L25
 304:Core/Src/main.c ****   {
 430              		.loc 1 304 3 is_stmt 1 view .LVU131
 304:Core/Src/main.c ****   {
 431              		.loc 1 304 7 is_stmt 0 view .LVU132
 432 0048 1948     		ldr	r0, .L31
 433 004a FFF7FEFF 		bl	HAL_TIM_IC_Init
 434              	.LVL11:
 304:Core/Src/main.c ****   {
 435              		.loc 1 304 6 discriminator 1 view .LVU133
 436 004e 28BB     		cbnz	r0, .L26
 308:Core/Src/main.c ****   sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 437              		.loc 1 308 3 is_stmt 1 view .LVU134
 308:Core/Src/main.c ****   sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 438              		.loc 1 308 37 is_stmt 0 view .LVU135
 439 0050 0023     		movs	r3, #0
 440 0052 0493     		str	r3, [sp, #16]
 309:Core/Src/main.c ****   if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 441              		.loc 1 309 3 is_stmt 1 view .LVU136
 309:Core/Src/main.c ****   if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 442              		.loc 1 309 33 is_stmt 0 view .LVU137
 443 0054 0593     		str	r3, [sp, #20]
 310:Core/Src/main.c ****   {
 444              		.loc 1 310 3 is_stmt 1 view .LVU138
 310:Core/Src/main.c ****   {
 445              		.loc 1 310 7 is_stmt 0 view .LVU139
 446 0056 04A9     		add	r1, sp, #16
 447 0058 1548     		ldr	r0, .L31
 448 005a FFF7FEFF 		bl	HAL_TIMEx_MasterConfigSynchronization
 449              	.LVL12:
 310:Core/Src/main.c ****   {
 450              		.loc 1 310 6 discriminator 1 view .LVU140
 451 005e F8B9     		cbnz	r0, .L27
 314:Core/Src/main.c ****   sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 452              		.loc 1 314 3 is_stmt 1 view .LVU141
 314:Core/Src/main.c ****   sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 453              		.loc 1 314 24 is_stmt 0 view .LVU142
 454 0060 0022     		movs	r2, #0
 455 0062 0092     		str	r2, [sp]
 315:Core/Src/main.c ****   sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 456              		.loc 1 315 3 is_stmt 1 view .LVU143
 315:Core/Src/main.c ****   sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
ARM GAS  /tmp/ccmoXVAD.s 			page 37


 457              		.loc 1 315 25 is_stmt 0 view .LVU144
 458 0064 0123     		movs	r3, #1
 459 0066 0193     		str	r3, [sp, #4]
 316:Core/Src/main.c ****   sConfigIC.ICFilter = 0;
 460              		.loc 1 316 3 is_stmt 1 view .LVU145
 316:Core/Src/main.c ****   sConfigIC.ICFilter = 0;
 461              		.loc 1 316 25 is_stmt 0 view .LVU146
 462 0068 0292     		str	r2, [sp, #8]
 317:Core/Src/main.c ****   if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 463              		.loc 1 317 3 is_stmt 1 view .LVU147
 317:Core/Src/main.c ****   if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 464              		.loc 1 317 22 is_stmt 0 view .LVU148
 465 006a 0392     		str	r2, [sp, #12]
 318:Core/Src/main.c ****   {
 466              		.loc 1 318 3 is_stmt 1 view .LVU149
 318:Core/Src/main.c ****   {
 467              		.loc 1 318 7 is_stmt 0 view .LVU150
 468 006c 6946     		mov	r1, sp
 469 006e 1048     		ldr	r0, .L31
 470 0070 FFF7FEFF 		bl	HAL_TIM_IC_ConfigChannel
 471              	.LVL13:
 318:Core/Src/main.c ****   {
 472              		.loc 1 318 6 discriminator 1 view .LVU151
 473 0074 B0B9     		cbnz	r0, .L28
 322:Core/Src/main.c ****   {
 474              		.loc 1 322 3 is_stmt 1 view .LVU152
 322:Core/Src/main.c ****   {
 475              		.loc 1 322 7 is_stmt 0 view .LVU153
 476 0076 0422     		movs	r2, #4
 477 0078 6946     		mov	r1, sp
 478 007a 0D48     		ldr	r0, .L31
 479 007c FFF7FEFF 		bl	HAL_TIM_IC_ConfigChannel
 480              	.LVL14:
 322:Core/Src/main.c ****   {
 481              		.loc 1 322 6 discriminator 1 view .LVU154
 482 0080 90B9     		cbnz	r0, .L29
 326:Core/Src/main.c ****   {
 483              		.loc 1 326 3 is_stmt 1 view .LVU155
 326:Core/Src/main.c ****   {
 484              		.loc 1 326 7 is_stmt 0 view .LVU156
 485 0082 0822     		movs	r2, #8
 486 0084 6946     		mov	r1, sp
 487 0086 0A48     		ldr	r0, .L31
 488 0088 FFF7FEFF 		bl	HAL_TIM_IC_ConfigChannel
 489              	.LVL15:
 326:Core/Src/main.c ****   {
 490              		.loc 1 326 6 discriminator 1 view .LVU157
 491 008c 70B9     		cbnz	r0, .L30
 334:Core/Src/main.c **** 
 492              		.loc 1 334 1 view .LVU158
 493 008e 0BB0     		add	sp, sp, #44
 494              	.LCFI9:
 495              		.cfi_remember_state
 496              		.cfi_def_cfa_offset 4
 497              		@ sp needed
 498 0090 5DF804FB 		ldr	pc, [sp], #4
 499              	.L24:
ARM GAS  /tmp/ccmoXVAD.s 			page 38


 500              	.LCFI10:
 501              		.cfi_restore_state
 297:Core/Src/main.c ****   }
 502              		.loc 1 297 5 is_stmt 1 view .LVU159
 503 0094 FFF7FEFF 		bl	Error_Handler
 504              	.LVL16:
 505              	.L25:
 302:Core/Src/main.c ****   }
 506              		.loc 1 302 5 view .LVU160
 507 0098 FFF7FEFF 		bl	Error_Handler
 508              	.LVL17:
 509              	.L26:
 306:Core/Src/main.c ****   }
 510              		.loc 1 306 5 view .LVU161
 511 009c FFF7FEFF 		bl	Error_Handler
 512              	.LVL18:
 513              	.L27:
 312:Core/Src/main.c ****   }
 514              		.loc 1 312 5 view .LVU162
 515 00a0 FFF7FEFF 		bl	Error_Handler
 516              	.LVL19:
 517              	.L28:
 320:Core/Src/main.c ****   }
 518              		.loc 1 320 5 view .LVU163
 519 00a4 FFF7FEFF 		bl	Error_Handler
 520              	.LVL20:
 521              	.L29:
 324:Core/Src/main.c ****   }
 522              		.loc 1 324 5 view .LVU164
 523 00a8 FFF7FEFF 		bl	Error_Handler
 524              	.LVL21:
 525              	.L30:
 328:Core/Src/main.c ****   }
 526              		.loc 1 328 5 view .LVU165
 527 00ac FFF7FEFF 		bl	Error_Handler
 528              	.LVL22:
 529              	.L32:
 530              		.align	2
 531              	.L31:
 532 00b0 00000000 		.word	htim2
 533              		.cfi_endproc
 534              	.LFE224:
 536              		.section	.text.MX_I2C1_Init,"ax",%progbits
 537              		.align	1
 538              		.syntax unified
 539              		.thumb
 540              		.thumb_func
 542              	MX_I2C1_Init:
 543              	.LFB223:
 242:Core/Src/main.c **** 
 544              		.loc 1 242 1 view -0
 545              		.cfi_startproc
 546              		@ args = 0, pretend = 0, frame = 0
 547              		@ frame_needed = 0, uses_anonymous_args = 0
 548 0000 08B5     		push	{r3, lr}
 549              	.LCFI11:
 550              		.cfi_def_cfa_offset 8
ARM GAS  /tmp/ccmoXVAD.s 			page 39


 551              		.cfi_offset 3, -8
 552              		.cfi_offset 14, -4
 251:Core/Src/main.c ****   hi2c1.Init.ClockSpeed = 100000;
 553              		.loc 1 251 3 view .LVU167
 251:Core/Src/main.c ****   hi2c1.Init.ClockSpeed = 100000;
 554              		.loc 1 251 18 is_stmt 0 view .LVU168
 555 0002 0A48     		ldr	r0, .L37
 556 0004 0A4B     		ldr	r3, .L37+4
 557 0006 0360     		str	r3, [r0]
 252:Core/Src/main.c ****   hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 558              		.loc 1 252 3 is_stmt 1 view .LVU169
 252:Core/Src/main.c ****   hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 559              		.loc 1 252 25 is_stmt 0 view .LVU170
 560 0008 0A4B     		ldr	r3, .L37+8
 561 000a 4360     		str	r3, [r0, #4]
 253:Core/Src/main.c ****   hi2c1.Init.OwnAddress1 = 0;
 562              		.loc 1 253 3 is_stmt 1 view .LVU171
 253:Core/Src/main.c ****   hi2c1.Init.OwnAddress1 = 0;
 563              		.loc 1 253 24 is_stmt 0 view .LVU172
 564 000c 0023     		movs	r3, #0
 565 000e 8360     		str	r3, [r0, #8]
 254:Core/Src/main.c ****   hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 566              		.loc 1 254 3 is_stmt 1 view .LVU173
 254:Core/Src/main.c ****   hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 567              		.loc 1 254 26 is_stmt 0 view .LVU174
 568 0010 C360     		str	r3, [r0, #12]
 255:Core/Src/main.c ****   hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 569              		.loc 1 255 3 is_stmt 1 view .LVU175
 255:Core/Src/main.c ****   hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 570              		.loc 1 255 29 is_stmt 0 view .LVU176
 571 0012 4FF48042 		mov	r2, #16384
 572 0016 0261     		str	r2, [r0, #16]
 256:Core/Src/main.c ****   hi2c1.Init.OwnAddress2 = 0;
 573              		.loc 1 256 3 is_stmt 1 view .LVU177
 256:Core/Src/main.c ****   hi2c1.Init.OwnAddress2 = 0;
 574              		.loc 1 256 30 is_stmt 0 view .LVU178
 575 0018 4361     		str	r3, [r0, #20]
 257:Core/Src/main.c ****   hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 576              		.loc 1 257 3 is_stmt 1 view .LVU179
 257:Core/Src/main.c ****   hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 577              		.loc 1 257 26 is_stmt 0 view .LVU180
 578 001a 8361     		str	r3, [r0, #24]
 258:Core/Src/main.c ****   hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 579              		.loc 1 258 3 is_stmt 1 view .LVU181
 258:Core/Src/main.c ****   hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 580              		.loc 1 258 30 is_stmt 0 view .LVU182
 581 001c C361     		str	r3, [r0, #28]
 259:Core/Src/main.c ****   if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 582              		.loc 1 259 3 is_stmt 1 view .LVU183
 259:Core/Src/main.c ****   if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 583              		.loc 1 259 28 is_stmt 0 view .LVU184
 584 001e 0362     		str	r3, [r0, #32]
 260:Core/Src/main.c ****   {
 585              		.loc 1 260 3 is_stmt 1 view .LVU185
 260:Core/Src/main.c ****   {
 586              		.loc 1 260 7 is_stmt 0 view .LVU186
 587 0020 FFF7FEFF 		bl	HAL_I2C_Init
ARM GAS  /tmp/ccmoXVAD.s 			page 40


 588              	.LVL23:
 260:Core/Src/main.c ****   {
 589              		.loc 1 260 6 discriminator 1 view .LVU187
 590 0024 00B9     		cbnz	r0, .L36
 268:Core/Src/main.c **** 
 591              		.loc 1 268 1 view .LVU188
 592 0026 08BD     		pop	{r3, pc}
 593              	.L36:
 262:Core/Src/main.c ****   }
 594              		.loc 1 262 5 is_stmt 1 view .LVU189
 595 0028 FFF7FEFF 		bl	Error_Handler
 596              	.LVL24:
 597              	.L38:
 598              		.align	2
 599              	.L37:
 600 002c 00000000 		.word	hi2c1
 601 0030 00540040 		.word	1073763328
 602 0034 A0860100 		.word	100000
 603              		.cfi_endproc
 604              	.LFE223:
 606              		.section	.text.MX_TIM3_Init,"ax",%progbits
 607              		.align	1
 608              		.syntax unified
 609              		.thumb
 610              		.thumb_func
 612              	MX_TIM3_Init:
 613              	.LFB225:
 342:Core/Src/main.c **** 
 614              		.loc 1 342 1 view -0
 615              		.cfi_startproc
 616              		@ args = 0, pretend = 0, frame = 56
 617              		@ frame_needed = 0, uses_anonymous_args = 0
 618 0000 00B5     		push	{lr}
 619              	.LCFI12:
 620              		.cfi_def_cfa_offset 4
 621              		.cfi_offset 14, -4
 622 0002 8FB0     		sub	sp, sp, #60
 623              	.LCFI13:
 624              		.cfi_def_cfa_offset 64
 348:Core/Src/main.c ****   TIM_MasterConfigTypeDef sMasterConfig = {0};
 625              		.loc 1 348 3 view .LVU191
 348:Core/Src/main.c ****   TIM_MasterConfigTypeDef sMasterConfig = {0};
 626              		.loc 1 348 26 is_stmt 0 view .LVU192
 627 0004 0023     		movs	r3, #0
 628 0006 0A93     		str	r3, [sp, #40]
 629 0008 0B93     		str	r3, [sp, #44]
 630 000a 0C93     		str	r3, [sp, #48]
 631 000c 0D93     		str	r3, [sp, #52]
 349:Core/Src/main.c ****   TIM_OC_InitTypeDef sConfigOC = {0};
 632              		.loc 1 349 3 is_stmt 1 view .LVU193
 349:Core/Src/main.c ****   TIM_OC_InitTypeDef sConfigOC = {0};
 633              		.loc 1 349 27 is_stmt 0 view .LVU194
 634 000e 0893     		str	r3, [sp, #32]
 635 0010 0993     		str	r3, [sp, #36]
 350:Core/Src/main.c **** 
 636              		.loc 1 350 3 is_stmt 1 view .LVU195
 350:Core/Src/main.c **** 
ARM GAS  /tmp/ccmoXVAD.s 			page 41


 637              		.loc 1 350 22 is_stmt 0 view .LVU196
 638 0012 0193     		str	r3, [sp, #4]
 639 0014 0293     		str	r3, [sp, #8]
 640 0016 0393     		str	r3, [sp, #12]
 641 0018 0493     		str	r3, [sp, #16]
 642 001a 0593     		str	r3, [sp, #20]
 643 001c 0693     		str	r3, [sp, #24]
 644 001e 0793     		str	r3, [sp, #28]
 355:Core/Src/main.c ****   htim3.Init.Prescaler = 0;
 645              		.loc 1 355 3 is_stmt 1 view .LVU197
 355:Core/Src/main.c ****   htim3.Init.Prescaler = 0;
 646              		.loc 1 355 18 is_stmt 0 view .LVU198
 647 0020 2248     		ldr	r0, .L53
 648 0022 234A     		ldr	r2, .L53+4
 649 0024 0260     		str	r2, [r0]
 356:Core/Src/main.c ****   htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 650              		.loc 1 356 3 is_stmt 1 view .LVU199
 356:Core/Src/main.c ****   htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 651              		.loc 1 356 24 is_stmt 0 view .LVU200
 652 0026 4360     		str	r3, [r0, #4]
 357:Core/Src/main.c ****   htim3.Init.Period = 65535;
 653              		.loc 1 357 3 is_stmt 1 view .LVU201
 357:Core/Src/main.c ****   htim3.Init.Period = 65535;
 654              		.loc 1 357 26 is_stmt 0 view .LVU202
 655 0028 8360     		str	r3, [r0, #8]
 358:Core/Src/main.c ****   htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 656              		.loc 1 358 3 is_stmt 1 view .LVU203
 358:Core/Src/main.c ****   htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 657              		.loc 1 358 21 is_stmt 0 view .LVU204
 658 002a 4FF6FF72 		movw	r2, #65535
 659 002e C260     		str	r2, [r0, #12]
 359:Core/Src/main.c ****   htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 660              		.loc 1 359 3 is_stmt 1 view .LVU205
 359:Core/Src/main.c ****   htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 661              		.loc 1 359 28 is_stmt 0 view .LVU206
 662 0030 0361     		str	r3, [r0, #16]
 360:Core/Src/main.c ****   if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 663              		.loc 1 360 3 is_stmt 1 view .LVU207
 360:Core/Src/main.c ****   if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 664              		.loc 1 360 32 is_stmt 0 view .LVU208
 665 0032 8361     		str	r3, [r0, #24]
 361:Core/Src/main.c ****   {
 666              		.loc 1 361 3 is_stmt 1 view .LVU209
 361:Core/Src/main.c ****   {
 667              		.loc 1 361 7 is_stmt 0 view .LVU210
 668 0034 FFF7FEFF 		bl	HAL_TIM_Base_Init
 669              	.LVL25:
 361:Core/Src/main.c ****   {
 670              		.loc 1 361 6 discriminator 1 view .LVU211
 671 0038 58BB     		cbnz	r0, .L47
 365:Core/Src/main.c ****   if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 672              		.loc 1 365 3 is_stmt 1 view .LVU212
 365:Core/Src/main.c ****   if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 673              		.loc 1 365 34 is_stmt 0 view .LVU213
 674 003a 4FF48053 		mov	r3, #4096
 675 003e 0A93     		str	r3, [sp, #40]
 366:Core/Src/main.c ****   {
ARM GAS  /tmp/ccmoXVAD.s 			page 42


 676              		.loc 1 366 3 is_stmt 1 view .LVU214
 366:Core/Src/main.c ****   {
 677              		.loc 1 366 7 is_stmt 0 view .LVU215
 678 0040 0AA9     		add	r1, sp, #40
 679 0042 1A48     		ldr	r0, .L53
 680 0044 FFF7FEFF 		bl	HAL_TIM_ConfigClockSource
 681              	.LVL26:
 366:Core/Src/main.c ****   {
 682              		.loc 1 366 6 discriminator 1 view .LVU216
 683 0048 28BB     		cbnz	r0, .L48
 370:Core/Src/main.c ****   {
 684              		.loc 1 370 3 is_stmt 1 view .LVU217
 370:Core/Src/main.c ****   {
 685              		.loc 1 370 7 is_stmt 0 view .LVU218
 686 004a 1848     		ldr	r0, .L53
 687 004c FFF7FEFF 		bl	HAL_TIM_PWM_Init
 688              	.LVL27:
 370:Core/Src/main.c ****   {
 689              		.loc 1 370 6 discriminator 1 view .LVU219
 690 0050 18BB     		cbnz	r0, .L49
 374:Core/Src/main.c ****   sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 691              		.loc 1 374 3 is_stmt 1 view .LVU220
 374:Core/Src/main.c ****   sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 692              		.loc 1 374 37 is_stmt 0 view .LVU221
 693 0052 0023     		movs	r3, #0
 694 0054 0893     		str	r3, [sp, #32]
 375:Core/Src/main.c ****   if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 695              		.loc 1 375 3 is_stmt 1 view .LVU222
 375:Core/Src/main.c ****   if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 696              		.loc 1 375 33 is_stmt 0 view .LVU223
 697 0056 0993     		str	r3, [sp, #36]
 376:Core/Src/main.c ****   {
 698              		.loc 1 376 3 is_stmt 1 view .LVU224
 376:Core/Src/main.c ****   {
 699              		.loc 1 376 7 is_stmt 0 view .LVU225
 700 0058 08A9     		add	r1, sp, #32
 701 005a 1448     		ldr	r0, .L53
 702 005c FFF7FEFF 		bl	HAL_TIMEx_MasterConfigSynchronization
 703              	.LVL28:
 376:Core/Src/main.c ****   {
 704              		.loc 1 376 6 discriminator 1 view .LVU226
 705 0060 E8B9     		cbnz	r0, .L50
 380:Core/Src/main.c ****   sConfigOC.Pulse = 0;
 706              		.loc 1 380 3 is_stmt 1 view .LVU227
 380:Core/Src/main.c ****   sConfigOC.Pulse = 0;
 707              		.loc 1 380 20 is_stmt 0 view .LVU228
 708 0062 6023     		movs	r3, #96
 709 0064 0193     		str	r3, [sp, #4]
 381:Core/Src/main.c ****   sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 710              		.loc 1 381 3 is_stmt 1 view .LVU229
 381:Core/Src/main.c ****   sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 711              		.loc 1 381 19 is_stmt 0 view .LVU230
 712 0066 0022     		movs	r2, #0
 713 0068 0292     		str	r2, [sp, #8]
 382:Core/Src/main.c ****   sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 714              		.loc 1 382 3 is_stmt 1 view .LVU231
 382:Core/Src/main.c ****   sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
ARM GAS  /tmp/ccmoXVAD.s 			page 43


 715              		.loc 1 382 24 is_stmt 0 view .LVU232
 716 006a 0392     		str	r2, [sp, #12]
 383:Core/Src/main.c ****   if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 717              		.loc 1 383 3 is_stmt 1 view .LVU233
 383:Core/Src/main.c ****   if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 718              		.loc 1 383 24 is_stmt 0 view .LVU234
 719 006c 0592     		str	r2, [sp, #20]
 384:Core/Src/main.c ****   {
 720              		.loc 1 384 3 is_stmt 1 view .LVU235
 384:Core/Src/main.c ****   {
 721              		.loc 1 384 7 is_stmt 0 view .LVU236
 722 006e 01A9     		add	r1, sp, #4
 723 0070 0E48     		ldr	r0, .L53
 724 0072 FFF7FEFF 		bl	HAL_TIM_PWM_ConfigChannel
 725              	.LVL29:
 384:Core/Src/main.c ****   {
 726              		.loc 1 384 6 discriminator 1 view .LVU237
 727 0076 A0B9     		cbnz	r0, .L51
 388:Core/Src/main.c ****   {
 728              		.loc 1 388 3 is_stmt 1 view .LVU238
 388:Core/Src/main.c ****   {
 729              		.loc 1 388 7 is_stmt 0 view .LVU239
 730 0078 0422     		movs	r2, #4
 731 007a 0DEB0201 		add	r1, sp, r2
 732 007e 0B48     		ldr	r0, .L53
 733 0080 FFF7FEFF 		bl	HAL_TIM_PWM_ConfigChannel
 734              	.LVL30:
 388:Core/Src/main.c ****   {
 735              		.loc 1 388 6 discriminator 1 view .LVU240
 736 0084 78B9     		cbnz	r0, .L52
 395:Core/Src/main.c **** 
 737              		.loc 1 395 3 is_stmt 1 view .LVU241
 738 0086 0948     		ldr	r0, .L53
 739 0088 FFF7FEFF 		bl	HAL_TIM_MspPostInit
 740              	.LVL31:
 397:Core/Src/main.c **** 
 741              		.loc 1 397 1 is_stmt 0 view .LVU242
 742 008c 0FB0     		add	sp, sp, #60
 743              	.LCFI14:
 744              		.cfi_remember_state
 745              		.cfi_def_cfa_offset 4
 746              		@ sp needed
 747 008e 5DF804FB 		ldr	pc, [sp], #4
 748              	.L47:
 749              	.LCFI15:
 750              		.cfi_restore_state
 363:Core/Src/main.c ****   }
 751              		.loc 1 363 5 is_stmt 1 view .LVU243
 752 0092 FFF7FEFF 		bl	Error_Handler
 753              	.LVL32:
 754              	.L48:
 368:Core/Src/main.c ****   }
 755              		.loc 1 368 5 view .LVU244
 756 0096 FFF7FEFF 		bl	Error_Handler
 757              	.LVL33:
 758              	.L49:
 372:Core/Src/main.c ****   }
ARM GAS  /tmp/ccmoXVAD.s 			page 44


 759              		.loc 1 372 5 view .LVU245
 760 009a FFF7FEFF 		bl	Error_Handler
 761              	.LVL34:
 762              	.L50:
 378:Core/Src/main.c ****   }
 763              		.loc 1 378 5 view .LVU246
 764 009e FFF7FEFF 		bl	Error_Handler
 765              	.LVL35:
 766              	.L51:
 386:Core/Src/main.c ****   }
 767              		.loc 1 386 5 view .LVU247
 768 00a2 FFF7FEFF 		bl	Error_Handler
 769              	.LVL36:
 770              	.L52:
 390:Core/Src/main.c ****   }
 771              		.loc 1 390 5 view .LVU248
 772 00a6 FFF7FEFF 		bl	Error_Handler
 773              	.LVL37:
 774              	.L54:
 775 00aa 00BF     		.align	2
 776              	.L53:
 777 00ac 00000000 		.word	htim3
 778 00b0 00040040 		.word	1073742848
 779              		.cfi_endproc
 780              	.LFE225:
 782              		.section	.text.MX_TIM4_Init,"ax",%progbits
 783              		.align	1
 784              		.syntax unified
 785              		.thumb
 786              		.thumb_func
 788              	MX_TIM4_Init:
 789              	.LFB226:
 405:Core/Src/main.c **** 
 790              		.loc 1 405 1 view -0
 791              		.cfi_startproc
 792              		@ args = 0, pretend = 0, frame = 56
 793              		@ frame_needed = 0, uses_anonymous_args = 0
 794 0000 00B5     		push	{lr}
 795              	.LCFI16:
 796              		.cfi_def_cfa_offset 4
 797              		.cfi_offset 14, -4
 798 0002 8FB0     		sub	sp, sp, #60
 799              	.LCFI17:
 800              		.cfi_def_cfa_offset 64
 411:Core/Src/main.c ****   TIM_MasterConfigTypeDef sMasterConfig = {0};
 801              		.loc 1 411 3 view .LVU250
 411:Core/Src/main.c ****   TIM_MasterConfigTypeDef sMasterConfig = {0};
 802              		.loc 1 411 26 is_stmt 0 view .LVU251
 803 0004 0023     		movs	r3, #0
 804 0006 0A93     		str	r3, [sp, #40]
 805 0008 0B93     		str	r3, [sp, #44]
 806 000a 0C93     		str	r3, [sp, #48]
 807 000c 0D93     		str	r3, [sp, #52]
 412:Core/Src/main.c ****   TIM_OC_InitTypeDef sConfigOC = {0};
 808              		.loc 1 412 3 is_stmt 1 view .LVU252
 412:Core/Src/main.c ****   TIM_OC_InitTypeDef sConfigOC = {0};
 809              		.loc 1 412 27 is_stmt 0 view .LVU253
ARM GAS  /tmp/ccmoXVAD.s 			page 45


 810 000e 0893     		str	r3, [sp, #32]
 811 0010 0993     		str	r3, [sp, #36]
 413:Core/Src/main.c **** 
 812              		.loc 1 413 3 is_stmt 1 view .LVU254
 413:Core/Src/main.c **** 
 813              		.loc 1 413 22 is_stmt 0 view .LVU255
 814 0012 0193     		str	r3, [sp, #4]
 815 0014 0293     		str	r3, [sp, #8]
 816 0016 0393     		str	r3, [sp, #12]
 817 0018 0493     		str	r3, [sp, #16]
 818 001a 0593     		str	r3, [sp, #20]
 819 001c 0693     		str	r3, [sp, #24]
 820 001e 0793     		str	r3, [sp, #28]
 418:Core/Src/main.c ****   htim4.Init.Prescaler = 0;
 821              		.loc 1 418 3 is_stmt 1 view .LVU256
 418:Core/Src/main.c ****   htim4.Init.Prescaler = 0;
 822              		.loc 1 418 18 is_stmt 0 view .LVU257
 823 0020 2248     		ldr	r0, .L69
 824 0022 234A     		ldr	r2, .L69+4
 825 0024 0260     		str	r2, [r0]
 419:Core/Src/main.c ****   htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 826              		.loc 1 419 3 is_stmt 1 view .LVU258
 419:Core/Src/main.c ****   htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 827              		.loc 1 419 24 is_stmt 0 view .LVU259
 828 0026 4360     		str	r3, [r0, #4]
 420:Core/Src/main.c ****   htim4.Init.Period = 65535;
 829              		.loc 1 420 3 is_stmt 1 view .LVU260
 420:Core/Src/main.c ****   htim4.Init.Period = 65535;
 830              		.loc 1 420 26 is_stmt 0 view .LVU261
 831 0028 8360     		str	r3, [r0, #8]
 421:Core/Src/main.c ****   htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 832              		.loc 1 421 3 is_stmt 1 view .LVU262
 421:Core/Src/main.c ****   htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 833              		.loc 1 421 21 is_stmt 0 view .LVU263
 834 002a 4FF6FF72 		movw	r2, #65535
 835 002e C260     		str	r2, [r0, #12]
 422:Core/Src/main.c ****   htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 836              		.loc 1 422 3 is_stmt 1 view .LVU264
 422:Core/Src/main.c ****   htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 837              		.loc 1 422 28 is_stmt 0 view .LVU265
 838 0030 0361     		str	r3, [r0, #16]
 423:Core/Src/main.c ****   if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 839              		.loc 1 423 3 is_stmt 1 view .LVU266
 423:Core/Src/main.c ****   if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 840              		.loc 1 423 32 is_stmt 0 view .LVU267
 841 0032 8361     		str	r3, [r0, #24]
 424:Core/Src/main.c ****   {
 842              		.loc 1 424 3 is_stmt 1 view .LVU268
 424:Core/Src/main.c ****   {
 843              		.loc 1 424 7 is_stmt 0 view .LVU269
 844 0034 FFF7FEFF 		bl	HAL_TIM_Base_Init
 845              	.LVL38:
 424:Core/Src/main.c ****   {
 846              		.loc 1 424 6 discriminator 1 view .LVU270
 847 0038 58BB     		cbnz	r0, .L63
 428:Core/Src/main.c ****   if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 848              		.loc 1 428 3 is_stmt 1 view .LVU271
ARM GAS  /tmp/ccmoXVAD.s 			page 46


 428:Core/Src/main.c ****   if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 849              		.loc 1 428 34 is_stmt 0 view .LVU272
 850 003a 4FF48053 		mov	r3, #4096
 851 003e 0A93     		str	r3, [sp, #40]
 429:Core/Src/main.c ****   {
 852              		.loc 1 429 3 is_stmt 1 view .LVU273
 429:Core/Src/main.c ****   {
 853              		.loc 1 429 7 is_stmt 0 view .LVU274
 854 0040 0AA9     		add	r1, sp, #40
 855 0042 1A48     		ldr	r0, .L69
 856 0044 FFF7FEFF 		bl	HAL_TIM_ConfigClockSource
 857              	.LVL39:
 429:Core/Src/main.c ****   {
 858              		.loc 1 429 6 discriminator 1 view .LVU275
 859 0048 28BB     		cbnz	r0, .L64
 433:Core/Src/main.c ****   {
 860              		.loc 1 433 3 is_stmt 1 view .LVU276
 433:Core/Src/main.c ****   {
 861              		.loc 1 433 7 is_stmt 0 view .LVU277
 862 004a 1848     		ldr	r0, .L69
 863 004c FFF7FEFF 		bl	HAL_TIM_PWM_Init
 864              	.LVL40:
 433:Core/Src/main.c ****   {
 865              		.loc 1 433 6 discriminator 1 view .LVU278
 866 0050 18BB     		cbnz	r0, .L65
 437:Core/Src/main.c ****   sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 867              		.loc 1 437 3 is_stmt 1 view .LVU279
 437:Core/Src/main.c ****   sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 868              		.loc 1 437 37 is_stmt 0 view .LVU280
 869 0052 0023     		movs	r3, #0
 870 0054 0893     		str	r3, [sp, #32]
 438:Core/Src/main.c ****   if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 871              		.loc 1 438 3 is_stmt 1 view .LVU281
 438:Core/Src/main.c ****   if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 872              		.loc 1 438 33 is_stmt 0 view .LVU282
 873 0056 0993     		str	r3, [sp, #36]
 439:Core/Src/main.c ****   {
 874              		.loc 1 439 3 is_stmt 1 view .LVU283
 439:Core/Src/main.c ****   {
 875              		.loc 1 439 7 is_stmt 0 view .LVU284
 876 0058 08A9     		add	r1, sp, #32
 877 005a 1448     		ldr	r0, .L69
 878 005c FFF7FEFF 		bl	HAL_TIMEx_MasterConfigSynchronization
 879              	.LVL41:
 439:Core/Src/main.c ****   {
 880              		.loc 1 439 6 discriminator 1 view .LVU285
 881 0060 E8B9     		cbnz	r0, .L66
 443:Core/Src/main.c ****   sConfigOC.Pulse = 0;
 882              		.loc 1 443 3 is_stmt 1 view .LVU286
 443:Core/Src/main.c ****   sConfigOC.Pulse = 0;
 883              		.loc 1 443 20 is_stmt 0 view .LVU287
 884 0062 6023     		movs	r3, #96
 885 0064 0193     		str	r3, [sp, #4]
 444:Core/Src/main.c ****   sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 886              		.loc 1 444 3 is_stmt 1 view .LVU288
 444:Core/Src/main.c ****   sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 887              		.loc 1 444 19 is_stmt 0 view .LVU289
ARM GAS  /tmp/ccmoXVAD.s 			page 47


 888 0066 0023     		movs	r3, #0
 889 0068 0293     		str	r3, [sp, #8]
 445:Core/Src/main.c ****   sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 890              		.loc 1 445 3 is_stmt 1 view .LVU290
 445:Core/Src/main.c ****   sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 891              		.loc 1 445 24 is_stmt 0 view .LVU291
 892 006a 0393     		str	r3, [sp, #12]
 446:Core/Src/main.c ****   if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 893              		.loc 1 446 3 is_stmt 1 view .LVU292
 446:Core/Src/main.c ****   if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 894              		.loc 1 446 24 is_stmt 0 view .LVU293
 895 006c 0593     		str	r3, [sp, #20]
 447:Core/Src/main.c ****   {
 896              		.loc 1 447 3 is_stmt 1 view .LVU294
 447:Core/Src/main.c ****   {
 897              		.loc 1 447 7 is_stmt 0 view .LVU295
 898 006e 0822     		movs	r2, #8
 899 0070 01A9     		add	r1, sp, #4
 900 0072 0E48     		ldr	r0, .L69
 901 0074 FFF7FEFF 		bl	HAL_TIM_PWM_ConfigChannel
 902              	.LVL42:
 447:Core/Src/main.c ****   {
 903              		.loc 1 447 6 discriminator 1 view .LVU296
 904 0078 98B9     		cbnz	r0, .L67
 451:Core/Src/main.c ****   {
 905              		.loc 1 451 3 is_stmt 1 view .LVU297
 451:Core/Src/main.c ****   {
 906              		.loc 1 451 7 is_stmt 0 view .LVU298
 907 007a 0C22     		movs	r2, #12
 908 007c 01A9     		add	r1, sp, #4
 909 007e 0B48     		ldr	r0, .L69
 910 0080 FFF7FEFF 		bl	HAL_TIM_PWM_ConfigChannel
 911              	.LVL43:
 451:Core/Src/main.c ****   {
 912              		.loc 1 451 6 discriminator 1 view .LVU299
 913 0084 78B9     		cbnz	r0, .L68
 458:Core/Src/main.c **** 
 914              		.loc 1 458 3 is_stmt 1 view .LVU300
 915 0086 0948     		ldr	r0, .L69
 916 0088 FFF7FEFF 		bl	HAL_TIM_MspPostInit
 917              	.LVL44:
 460:Core/Src/main.c **** 
 918              		.loc 1 460 1 is_stmt 0 view .LVU301
 919 008c 0FB0     		add	sp, sp, #60
 920              	.LCFI18:
 921              		.cfi_remember_state
 922              		.cfi_def_cfa_offset 4
 923              		@ sp needed
 924 008e 5DF804FB 		ldr	pc, [sp], #4
 925              	.L63:
 926              	.LCFI19:
 927              		.cfi_restore_state
 426:Core/Src/main.c ****   }
 928              		.loc 1 426 5 is_stmt 1 view .LVU302
 929 0092 FFF7FEFF 		bl	Error_Handler
 930              	.LVL45:
 931              	.L64:
ARM GAS  /tmp/ccmoXVAD.s 			page 48


 431:Core/Src/main.c ****   }
 932              		.loc 1 431 5 view .LVU303
 933 0096 FFF7FEFF 		bl	Error_Handler
 934              	.LVL46:
 935              	.L65:
 435:Core/Src/main.c ****   }
 936              		.loc 1 435 5 view .LVU304
 937 009a FFF7FEFF 		bl	Error_Handler
 938              	.LVL47:
 939              	.L66:
 441:Core/Src/main.c ****   }
 940              		.loc 1 441 5 view .LVU305
 941 009e FFF7FEFF 		bl	Error_Handler
 942              	.LVL48:
 943              	.L67:
 449:Core/Src/main.c ****   }
 944              		.loc 1 449 5 view .LVU306
 945 00a2 FFF7FEFF 		bl	Error_Handler
 946              	.LVL49:
 947              	.L68:
 453:Core/Src/main.c ****   }
 948              		.loc 1 453 5 view .LVU307
 949 00a6 FFF7FEFF 		bl	Error_Handler
 950              	.LVL50:
 951              	.L70:
 952 00aa 00BF     		.align	2
 953              	.L69:
 954 00ac 00000000 		.word	htim4
 955 00b0 00080040 		.word	1073743872
 956              		.cfi_endproc
 957              	.LFE226:
 959              		.section	.text.MX_USART1_UART_Init,"ax",%progbits
 960              		.align	1
 961              		.syntax unified
 962              		.thumb
 963              		.thumb_func
 965              	MX_USART1_UART_Init:
 966              	.LFB227:
 468:Core/Src/main.c **** 
 967              		.loc 1 468 1 view -0
 968              		.cfi_startproc
 969              		@ args = 0, pretend = 0, frame = 0
 970              		@ frame_needed = 0, uses_anonymous_args = 0
 971 0000 08B5     		push	{r3, lr}
 972              	.LCFI20:
 973              		.cfi_def_cfa_offset 8
 974              		.cfi_offset 3, -8
 975              		.cfi_offset 14, -4
 477:Core/Src/main.c ****   huart1.Init.BaudRate = 115200;
 976              		.loc 1 477 3 view .LVU309
 477:Core/Src/main.c ****   huart1.Init.BaudRate = 115200;
 977              		.loc 1 477 19 is_stmt 0 view .LVU310
 978 0002 0A48     		ldr	r0, .L75
 979 0004 0A4B     		ldr	r3, .L75+4
 980 0006 0360     		str	r3, [r0]
 478:Core/Src/main.c ****   huart1.Init.WordLength = UART_WORDLENGTH_8B;
 981              		.loc 1 478 3 is_stmt 1 view .LVU311
ARM GAS  /tmp/ccmoXVAD.s 			page 49


 478:Core/Src/main.c ****   huart1.Init.WordLength = UART_WORDLENGTH_8B;
 982              		.loc 1 478 24 is_stmt 0 view .LVU312
 983 0008 4FF4E133 		mov	r3, #115200
 984 000c 4360     		str	r3, [r0, #4]
 479:Core/Src/main.c ****   huart1.Init.StopBits = UART_STOPBITS_1;
 985              		.loc 1 479 3 is_stmt 1 view .LVU313
 479:Core/Src/main.c ****   huart1.Init.StopBits = UART_STOPBITS_1;
 986              		.loc 1 479 26 is_stmt 0 view .LVU314
 987 000e 0023     		movs	r3, #0
 988 0010 8360     		str	r3, [r0, #8]
 480:Core/Src/main.c ****   huart1.Init.Parity = UART_PARITY_NONE;
 989              		.loc 1 480 3 is_stmt 1 view .LVU315
 480:Core/Src/main.c ****   huart1.Init.Parity = UART_PARITY_NONE;
 990              		.loc 1 480 24 is_stmt 0 view .LVU316
 991 0012 C360     		str	r3, [r0, #12]
 481:Core/Src/main.c ****   huart1.Init.Mode = UART_MODE_TX_RX;
 992              		.loc 1 481 3 is_stmt 1 view .LVU317
 481:Core/Src/main.c ****   huart1.Init.Mode = UART_MODE_TX_RX;
 993              		.loc 1 481 22 is_stmt 0 view .LVU318
 994 0014 0361     		str	r3, [r0, #16]
 482:Core/Src/main.c ****   huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 995              		.loc 1 482 3 is_stmt 1 view .LVU319
 482:Core/Src/main.c ****   huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 996              		.loc 1 482 20 is_stmt 0 view .LVU320
 997 0016 0C22     		movs	r2, #12
 998 0018 4261     		str	r2, [r0, #20]
 483:Core/Src/main.c ****   huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 999              		.loc 1 483 3 is_stmt 1 view .LVU321
 483:Core/Src/main.c ****   huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 1000              		.loc 1 483 25 is_stmt 0 view .LVU322
 1001 001a 8361     		str	r3, [r0, #24]
 484:Core/Src/main.c ****   if (HAL_UART_Init(&huart1) != HAL_OK)
 1002              		.loc 1 484 3 is_stmt 1 view .LVU323
 484:Core/Src/main.c ****   if (HAL_UART_Init(&huart1) != HAL_OK)
 1003              		.loc 1 484 28 is_stmt 0 view .LVU324
 1004 001c C361     		str	r3, [r0, #28]
 485:Core/Src/main.c ****   {
 1005              		.loc 1 485 3 is_stmt 1 view .LVU325
 485:Core/Src/main.c ****   {
 1006              		.loc 1 485 7 is_stmt 0 view .LVU326
 1007 001e FFF7FEFF 		bl	HAL_UART_Init
 1008              	.LVL51:
 485:Core/Src/main.c ****   {
 1009              		.loc 1 485 6 discriminator 1 view .LVU327
 1010 0022 00B9     		cbnz	r0, .L74
 493:Core/Src/main.c **** 
 1011              		.loc 1 493 1 view .LVU328
 1012 0024 08BD     		pop	{r3, pc}
 1013              	.L74:
 487:Core/Src/main.c ****   }
 1014              		.loc 1 487 5 is_stmt 1 view .LVU329
 1015 0026 FFF7FEFF 		bl	Error_Handler
 1016              	.LVL52:
 1017              	.L76:
 1018 002a 00BF     		.align	2
 1019              	.L75:
 1020 002c 00000000 		.word	huart1
ARM GAS  /tmp/ccmoXVAD.s 			page 50


 1021 0030 00100140 		.word	1073811456
 1022              		.cfi_endproc
 1023              	.LFE227:
 1025              		.section	.text.SystemClock_Config,"ax",%progbits
 1026              		.align	1
 1027              		.global	SystemClock_Config
 1028              		.syntax unified
 1029              		.thumb
 1030              		.thumb_func
 1032              	SystemClock_Config:
 1033              	.LFB221:
 144:Core/Src/main.c ****   RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 1034              		.loc 1 144 1 view -0
 1035              		.cfi_startproc
 1036              		@ args = 0, pretend = 0, frame = 80
 1037              		@ frame_needed = 0, uses_anonymous_args = 0
 1038 0000 00B5     		push	{lr}
 1039              	.LCFI21:
 1040              		.cfi_def_cfa_offset 4
 1041              		.cfi_offset 14, -4
 1042 0002 95B0     		sub	sp, sp, #84
 1043              	.LCFI22:
 1044              		.cfi_def_cfa_offset 88
 145:Core/Src/main.c ****   RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 1045              		.loc 1 145 3 view .LVU331
 145:Core/Src/main.c ****   RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 1046              		.loc 1 145 22 is_stmt 0 view .LVU332
 1047 0004 3022     		movs	r2, #48
 1048 0006 0021     		movs	r1, #0
 1049 0008 08A8     		add	r0, sp, #32
 1050 000a FFF7FEFF 		bl	memset
 1051              	.LVL53:
 146:Core/Src/main.c **** 
 1052              		.loc 1 146 3 is_stmt 1 view .LVU333
 146:Core/Src/main.c **** 
 1053              		.loc 1 146 22 is_stmt 0 view .LVU334
 1054 000e 0023     		movs	r3, #0
 1055 0010 0393     		str	r3, [sp, #12]
 1056 0012 0493     		str	r3, [sp, #16]
 1057 0014 0593     		str	r3, [sp, #20]
 1058 0016 0693     		str	r3, [sp, #24]
 1059 0018 0793     		str	r3, [sp, #28]
 150:Core/Src/main.c ****   __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 1060              		.loc 1 150 3 is_stmt 1 view .LVU335
 1061              	.LBB10:
 150:Core/Src/main.c ****   __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 1062              		.loc 1 150 3 view .LVU336
 1063 001a 0193     		str	r3, [sp, #4]
 150:Core/Src/main.c ****   __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 1064              		.loc 1 150 3 view .LVU337
 1065 001c 1F4A     		ldr	r2, .L83
 1066 001e 116C     		ldr	r1, [r2, #64]
 1067 0020 41F08051 		orr	r1, r1, #268435456
 1068 0024 1164     		str	r1, [r2, #64]
 150:Core/Src/main.c ****   __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 1069              		.loc 1 150 3 view .LVU338
 1070 0026 126C     		ldr	r2, [r2, #64]
ARM GAS  /tmp/ccmoXVAD.s 			page 51


 1071 0028 02F08052 		and	r2, r2, #268435456
 1072 002c 0192     		str	r2, [sp, #4]
 150:Core/Src/main.c ****   __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 1073              		.loc 1 150 3 view .LVU339
 1074 002e 019A     		ldr	r2, [sp, #4]
 1075              	.LBE10:
 150:Core/Src/main.c ****   __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 1076              		.loc 1 150 3 view .LVU340
 151:Core/Src/main.c **** 
 1077              		.loc 1 151 3 view .LVU341
 1078              	.LBB11:
 151:Core/Src/main.c **** 
 1079              		.loc 1 151 3 view .LVU342
 1080 0030 0293     		str	r3, [sp, #8]
 151:Core/Src/main.c **** 
 1081              		.loc 1 151 3 view .LVU343
 1082 0032 1B4B     		ldr	r3, .L83+4
 1083 0034 1A68     		ldr	r2, [r3]
 1084 0036 42F44042 		orr	r2, r2, #49152
 1085 003a 1A60     		str	r2, [r3]
 151:Core/Src/main.c **** 
 1086              		.loc 1 151 3 view .LVU344
 1087 003c 1B68     		ldr	r3, [r3]
 1088 003e 03F44043 		and	r3, r3, #49152
 1089 0042 0293     		str	r3, [sp, #8]
 151:Core/Src/main.c **** 
 1090              		.loc 1 151 3 view .LVU345
 1091 0044 029B     		ldr	r3, [sp, #8]
 1092              	.LBE11:
 151:Core/Src/main.c **** 
 1093              		.loc 1 151 3 view .LVU346
 156:Core/Src/main.c ****   RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 1094              		.loc 1 156 3 view .LVU347
 156:Core/Src/main.c ****   RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 1095              		.loc 1 156 36 is_stmt 0 view .LVU348
 1096 0046 0123     		movs	r3, #1
 1097 0048 0893     		str	r3, [sp, #32]
 157:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 1098              		.loc 1 157 3 is_stmt 1 view .LVU349
 157:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 1099              		.loc 1 157 30 is_stmt 0 view .LVU350
 1100 004a 4FF48033 		mov	r3, #65536
 1101 004e 0993     		str	r3, [sp, #36]
 158:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 1102              		.loc 1 158 3 is_stmt 1 view .LVU351
 158:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 1103              		.loc 1 158 34 is_stmt 0 view .LVU352
 1104 0050 0223     		movs	r3, #2
 1105 0052 0E93     		str	r3, [sp, #56]
 159:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLM = 12;
 1106              		.loc 1 159 3 is_stmt 1 view .LVU353
 159:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLM = 12;
 1107              		.loc 1 159 35 is_stmt 0 view .LVU354
 1108 0054 4FF48002 		mov	r2, #4194304
 1109 0058 0F92     		str	r2, [sp, #60]
 160:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLN = 96;
 1110              		.loc 1 160 3 is_stmt 1 view .LVU355
ARM GAS  /tmp/ccmoXVAD.s 			page 52


 160:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLN = 96;
 1111              		.loc 1 160 30 is_stmt 0 view .LVU356
 1112 005a 0C22     		movs	r2, #12
 1113 005c 1092     		str	r2, [sp, #64]
 161:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 1114              		.loc 1 161 3 is_stmt 1 view .LVU357
 161:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 1115              		.loc 1 161 30 is_stmt 0 view .LVU358
 1116 005e 6022     		movs	r2, #96
 1117 0060 1192     		str	r2, [sp, #68]
 162:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLQ = 4;
 1118              		.loc 1 162 3 is_stmt 1 view .LVU359
 162:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLQ = 4;
 1119              		.loc 1 162 30 is_stmt 0 view .LVU360
 1120 0062 1293     		str	r3, [sp, #72]
 163:Core/Src/main.c ****   if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 1121              		.loc 1 163 3 is_stmt 1 view .LVU361
 163:Core/Src/main.c ****   if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 1122              		.loc 1 163 30 is_stmt 0 view .LVU362
 1123 0064 0423     		movs	r3, #4
 1124 0066 1393     		str	r3, [sp, #76]
 164:Core/Src/main.c ****   {
 1125              		.loc 1 164 3 is_stmt 1 view .LVU363
 164:Core/Src/main.c ****   {
 1126              		.loc 1 164 7 is_stmt 0 view .LVU364
 1127 0068 08A8     		add	r0, sp, #32
 1128 006a FFF7FEFF 		bl	HAL_RCC_OscConfig
 1129              	.LVL54:
 164:Core/Src/main.c ****   {
 1130              		.loc 1 164 6 discriminator 1 view .LVU365
 1131 006e 88B9     		cbnz	r0, .L81
 171:Core/Src/main.c ****                               |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
 1132              		.loc 1 171 3 is_stmt 1 view .LVU366
 171:Core/Src/main.c ****                               |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
 1133              		.loc 1 171 31 is_stmt 0 view .LVU367
 1134 0070 0F23     		movs	r3, #15
 1135 0072 0393     		str	r3, [sp, #12]
 173:Core/Src/main.c ****   RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 1136              		.loc 1 173 3 is_stmt 1 view .LVU368
 173:Core/Src/main.c ****   RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 1137              		.loc 1 173 34 is_stmt 0 view .LVU369
 1138 0074 0223     		movs	r3, #2
 1139 0076 0493     		str	r3, [sp, #16]
 174:Core/Src/main.c ****   RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 1140              		.loc 1 174 3 is_stmt 1 view .LVU370
 174:Core/Src/main.c ****   RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 1141              		.loc 1 174 35 is_stmt 0 view .LVU371
 1142 0078 0023     		movs	r3, #0
 1143 007a 0593     		str	r3, [sp, #20]
 175:Core/Src/main.c ****   RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 1144              		.loc 1 175 3 is_stmt 1 view .LVU372
 175:Core/Src/main.c ****   RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 1145              		.loc 1 175 36 is_stmt 0 view .LVU373
 1146 007c 4FF48052 		mov	r2, #4096
 1147 0080 0692     		str	r2, [sp, #24]
 176:Core/Src/main.c **** 
 1148              		.loc 1 176 3 is_stmt 1 view .LVU374
ARM GAS  /tmp/ccmoXVAD.s 			page 53


 176:Core/Src/main.c **** 
 1149              		.loc 1 176 36 is_stmt 0 view .LVU375
 1150 0082 0793     		str	r3, [sp, #28]
 178:Core/Src/main.c ****   {
 1151              		.loc 1 178 3 is_stmt 1 view .LVU376
 178:Core/Src/main.c ****   {
 1152              		.loc 1 178 7 is_stmt 0 view .LVU377
 1153 0084 0321     		movs	r1, #3
 1154 0086 03A8     		add	r0, sp, #12
 1155 0088 FFF7FEFF 		bl	HAL_RCC_ClockConfig
 1156              	.LVL55:
 178:Core/Src/main.c ****   {
 1157              		.loc 1 178 6 discriminator 1 view .LVU378
 1158 008c 20B9     		cbnz	r0, .L82
 182:Core/Src/main.c **** 
 1159              		.loc 1 182 1 view .LVU379
 1160 008e 15B0     		add	sp, sp, #84
 1161              	.LCFI23:
 1162              		.cfi_remember_state
 1163              		.cfi_def_cfa_offset 4
 1164              		@ sp needed
 1165 0090 5DF804FB 		ldr	pc, [sp], #4
 1166              	.L81:
 1167              	.LCFI24:
 1168              		.cfi_restore_state
 166:Core/Src/main.c ****   }
 1169              		.loc 1 166 5 is_stmt 1 view .LVU380
 1170 0094 FFF7FEFF 		bl	Error_Handler
 1171              	.LVL56:
 1172              	.L82:
 180:Core/Src/main.c ****   }
 1173              		.loc 1 180 5 view .LVU381
 1174 0098 FFF7FEFF 		bl	Error_Handler
 1175              	.LVL57:
 1176              	.L84:
 1177              		.align	2
 1178              	.L83:
 1179 009c 00380240 		.word	1073887232
 1180 00a0 00700040 		.word	1073770496
 1181              		.cfi_endproc
 1182              	.LFE221:
 1184              		.section	.text.main,"ax",%progbits
 1185              		.align	1
 1186              		.global	main
 1187              		.syntax unified
 1188              		.thumb
 1189              		.thumb_func
 1191              	main:
 1192              	.LFB220:
  81:Core/Src/main.c **** 
 1193              		.loc 1 81 1 view -0
 1194              		.cfi_startproc
 1195              		@ Volatile: function does not return.
 1196              		@ args = 0, pretend = 0, frame = 72
 1197              		@ frame_needed = 0, uses_anonymous_args = 0
 1198 0000 00B5     		push	{lr}
 1199              	.LCFI25:
ARM GAS  /tmp/ccmoXVAD.s 			page 54


 1200              		.cfi_def_cfa_offset 4
 1201              		.cfi_offset 14, -4
 1202 0002 93B0     		sub	sp, sp, #76
 1203              	.LCFI26:
 1204              		.cfi_def_cfa_offset 80
  84:Core/Src/main.c **** 
 1205              		.loc 1 84 3 view .LVU383
  91:Core/Src/main.c **** 
 1206              		.loc 1 91 3 view .LVU384
 1207 0004 FFF7FEFF 		bl	HAL_Init
 1208              	.LVL58:
  98:Core/Src/main.c **** 
 1209              		.loc 1 98 3 view .LVU385
 1210 0008 FFF7FEFF 		bl	SystemClock_Config
 1211              	.LVL59:
 105:Core/Src/main.c ****   MX_ADC1_Init();
 1212              		.loc 1 105 3 view .LVU386
 1213 000c FFF7FEFF 		bl	MX_GPIO_Init
 1214              	.LVL60:
 106:Core/Src/main.c ****   MX_TIM2_Init();
 1215              		.loc 1 106 3 view .LVU387
 1216 0010 FFF7FEFF 		bl	MX_ADC1_Init
 1217              	.LVL61:
 107:Core/Src/main.c ****   MX_I2C1_Init();
 1218              		.loc 1 107 3 view .LVU388
 1219 0014 FFF7FEFF 		bl	MX_TIM2_Init
 1220              	.LVL62:
 108:Core/Src/main.c ****   MX_TIM3_Init();
 1221              		.loc 1 108 3 view .LVU389
 1222 0018 FFF7FEFF 		bl	MX_I2C1_Init
 1223              	.LVL63:
 109:Core/Src/main.c ****   MX_TIM4_Init();
 1224              		.loc 1 109 3 view .LVU390
 1225 001c FFF7FEFF 		bl	MX_TIM3_Init
 1226              	.LVL64:
 110:Core/Src/main.c ****   MX_USART1_UART_Init();
 1227              		.loc 1 110 3 view .LVU391
 1228 0020 FFF7FEFF 		bl	MX_TIM4_Init
 1229              	.LVL65:
 111:Core/Src/main.c ****   /* USER CODE BEGIN 2 */
 1230              		.loc 1 111 3 view .LVU392
 1231 0024 FFF7FEFF 		bl	MX_USART1_UART_Init
 1232              	.LVL66:
 113:Core/Src/main.c ****   while(MPU6050_Data.MPU6050_address != 0x68){
 1233              		.loc 1 113 3 view .LVU393
 1234 0028 FFF7FEFF 		bl	setup_motor_dc
 1235              	.LVL67:
 114:Core/Src/main.c **** 	    MPU6050_Data.MPU6050_address =MPU6050_Init(&hi2c1);
 1236              		.loc 1 114 3 view .LVU394
 114:Core/Src/main.c **** 	    MPU6050_Data.MPU6050_address =MPU6050_Init(&hi2c1);
 1237              		.loc 1 114 8 is_stmt 0 view .LVU395
 1238 002c 07E0     		b	.L86
 1239              	.L87:
 115:Core/Src/main.c **** 	    HAL_Delay(50);
 1240              		.loc 1 115 6 is_stmt 1 view .LVU396
 115:Core/Src/main.c **** 	    HAL_Delay(50);
 1241              		.loc 1 115 36 is_stmt 0 view .LVU397
ARM GAS  /tmp/ccmoXVAD.s 			page 55


 1242 002e 1348     		ldr	r0, .L90
 1243 0030 FFF7FEFF 		bl	MPU6050_Init
 1244              	.LVL68:
 115:Core/Src/main.c **** 	    HAL_Delay(50);
 1245              		.loc 1 115 35 discriminator 1 view .LVU398
 1246 0034 8DF83C00 		strb	r0, [sp, #60]
 116:Core/Src/main.c ****   }
 1247              		.loc 1 116 6 is_stmt 1 view .LVU399
 1248 0038 3220     		movs	r0, #50
 1249 003a FFF7FEFF 		bl	HAL_Delay
 1250              	.LVL69:
 1251              	.L86:
 114:Core/Src/main.c **** 	    MPU6050_Data.MPU6050_address =MPU6050_Init(&hi2c1);
 1252              		.loc 1 114 38 view .LVU400
 114:Core/Src/main.c **** 	    MPU6050_Data.MPU6050_address =MPU6050_Init(&hi2c1);
 1253              		.loc 1 114 21 is_stmt 0 view .LVU401
 1254 003e 9DF83C30 		ldrb	r3, [sp, #60]	@ zero_extendqisi2
 114:Core/Src/main.c **** 	    MPU6050_Data.MPU6050_address =MPU6050_Init(&hi2c1);
 1255              		.loc 1 114 38 view .LVU402
 1256 0042 682B     		cmp	r3, #104
 1257 0044 F3D1     		bne	.L87
 119:Core/Src/main.c ****   HAL_TIM_IC_Start_IT(&htim2, TIM_CHANNEL_2);
 1258              		.loc 1 119 3 is_stmt 1 view .LVU403
 1259 0046 0E4C     		ldr	r4, .L90+4
 1260 0048 0021     		movs	r1, #0
 1261 004a 2046     		mov	r0, r4
 1262 004c FFF7FEFF 		bl	HAL_TIM_IC_Start_IT
 1263              	.LVL70:
 120:Core/Src/main.c ****   HAL_TIM_IC_Start_IT(&htim2, TIM_CHANNEL_3);
 1264              		.loc 1 120 3 view .LVU404
 1265 0050 0421     		movs	r1, #4
 1266 0052 2046     		mov	r0, r4
 1267 0054 FFF7FEFF 		bl	HAL_TIM_IC_Start_IT
 1268              	.LVL71:
 121:Core/Src/main.c ****   HAL_TIM_IC_Start_IT(&htim2, TIM_CHANNEL_3);
 1269              		.loc 1 121 3 view .LVU405
 1270 0058 0821     		movs	r1, #8
 1271 005a 2046     		mov	r0, r4
 1272 005c FFF7FEFF 		bl	HAL_TIM_IC_Start_IT
 1273              	.LVL72:
 122:Core/Src/main.c ****   /* USER CODE END 2 */
 1274              		.loc 1 122 3 view .LVU406
 1275 0060 0821     		movs	r1, #8
 1276 0062 2046     		mov	r0, r4
 1277 0064 FFF7FEFF 		bl	HAL_TIM_IC_Start_IT
 1278              	.LVL73:
 1279              	.L88:
 127:Core/Src/main.c ****   {
 1280              		.loc 1 127 3 view .LVU407
 129:Core/Src/main.c ****     MPU6050_Read_All(&hi2c1, &MPU6050_Data);
 1281              		.loc 1 129 5 view .LVU408
 1282 0068 FFF7FEFF 		bl	Ultrasonic_Get_Distance
 1283              	.LVL74:
 130:Core/Src/main.c ****     /* USER CODE END WHILE */
 1284              		.loc 1 130 5 view .LVU409
 1285 006c 6946     		mov	r1, sp
 1286 006e 0348     		ldr	r0, .L90
ARM GAS  /tmp/ccmoXVAD.s 			page 56


 1287 0070 FFF7FEFF 		bl	MPU6050_Read_All
 1288              	.LVL75:
 134:Core/Src/main.c ****   }
 1289              		.loc 1 134 5 discriminator 1 view .LVU410
 1290 0074 6420     		movs	r0, #100
 1291 0076 FFF7FEFF 		bl	HAL_Delay
 1292              	.LVL76:
 127:Core/Src/main.c ****   {
 1293              		.loc 1 127 9 view .LVU411
 1294 007a F5E7     		b	.L88
 1295              	.L91:
 1296              		.align	2
 1297              	.L90:
 1298 007c 00000000 		.word	hi2c1
 1299 0080 00000000 		.word	htim2
 1300              		.cfi_endproc
 1301              	.LFE220:
 1303              		.global	huart1
 1304              		.section	.bss.huart1,"aw",%nobits
 1305              		.align	2
 1308              	huart1:
 1309 0000 00000000 		.space	72
 1309      00000000 
 1309      00000000 
 1309      00000000 
 1309      00000000 
 1310              		.global	htim4
 1311              		.section	.bss.htim4,"aw",%nobits
 1312              		.align	2
 1315              	htim4:
 1316 0000 00000000 		.space	72
 1316      00000000 
 1316      00000000 
 1316      00000000 
 1316      00000000 
 1317              		.global	htim3
 1318              		.section	.bss.htim3,"aw",%nobits
 1319              		.align	2
 1322              	htim3:
 1323 0000 00000000 		.space	72
 1323      00000000 
 1323      00000000 
 1323      00000000 
 1323      00000000 
 1324              		.global	htim2
 1325              		.section	.bss.htim2,"aw",%nobits
 1326              		.align	2
 1329              	htim2:
 1330 0000 00000000 		.space	72
 1330      00000000 
 1330      00000000 
 1330      00000000 
 1330      00000000 
 1331              		.global	hi2c1
 1332              		.section	.bss.hi2c1,"aw",%nobits
 1333              		.align	2
 1336              	hi2c1:
ARM GAS  /tmp/ccmoXVAD.s 			page 57


 1337 0000 00000000 		.space	84
 1337      00000000 
 1337      00000000 
 1337      00000000 
 1337      00000000 
 1338              		.global	hadc1
 1339              		.section	.bss.hadc1,"aw",%nobits
 1340              		.align	2
 1343              	hadc1:
 1344 0000 00000000 		.space	72
 1344      00000000 
 1344      00000000 
 1344      00000000 
 1344      00000000 
 1345              		.text
 1346              	.Letext0:
 1347              		.file 3 "/home/vanmanh/tool/arm-gnu-toolchain-13.3.rel1-x86_64-arm-none-eabi/arm-none-eabi/include
 1348              		.file 4 "/home/vanmanh/tool/arm-gnu-toolchain-13.3.rel1-x86_64-arm-none-eabi/arm-none-eabi/include
 1349              		.file 5 "Drivers/CMSIS/Device/ST/STM32F4xx/Include/stm32f411xe.h"
 1350              		.file 6 "Drivers/CMSIS/Device/ST/STM32F4xx/Include/stm32f4xx.h"
 1351              		.file 7 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_def.h"
 1352              		.file 8 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_rcc_ex.h"
 1353              		.file 9 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_rcc.h"
 1354              		.file 10 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_gpio.h"
 1355              		.file 11 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_dma.h"
 1356              		.file 12 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_adc.h"
 1357              		.file 13 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_i2c.h"
 1358              		.file 14 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_tim.h"
 1359              		.file 15 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_uart.h"
 1360              		.file 16 "Core/Inc/motor_dc.h"
 1361              		.file 17 "Core/Inc/mpu6050.h"
 1362              		.file 18 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_tim_ex.h"
 1363              		.file 19 "Core/Inc/main.h"
 1364              		.file 20 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal.h"
 1365              		.file 21 "Core/Inc/ultrasonic.h"
 1366              		.file 22 "<built-in>"
ARM GAS  /tmp/ccmoXVAD.s 			page 58


DEFINED SYMBOLS
                            *ABS*:00000000 main.c
     /tmp/ccmoXVAD.s:21     .text.MX_GPIO_Init:00000000 $t
     /tmp/ccmoXVAD.s:26     .text.MX_GPIO_Init:00000000 MX_GPIO_Init
     /tmp/ccmoXVAD.s:191    .text.MX_GPIO_Init:000000c0 $d
     /tmp/ccmoXVAD.s:198    .text.Error_Handler:00000000 $t
     /tmp/ccmoXVAD.s:204    .text.Error_Handler:00000000 Error_Handler
     /tmp/ccmoXVAD.s:236    .text.MX_ADC1_Init:00000000 $t
     /tmp/ccmoXVAD.s:241    .text.MX_ADC1_Init:00000000 MX_ADC1_Init
     /tmp/ccmoXVAD.s:348    .text.MX_ADC1_Init:00000060 $d
     /tmp/ccmoXVAD.s:1343   .bss.hadc1:00000000 hadc1
     /tmp/ccmoXVAD.s:355    .text.MX_TIM2_Init:00000000 $t
     /tmp/ccmoXVAD.s:360    .text.MX_TIM2_Init:00000000 MX_TIM2_Init
     /tmp/ccmoXVAD.s:532    .text.MX_TIM2_Init:000000b0 $d
     /tmp/ccmoXVAD.s:1329   .bss.htim2:00000000 htim2
     /tmp/ccmoXVAD.s:537    .text.MX_I2C1_Init:00000000 $t
     /tmp/ccmoXVAD.s:542    .text.MX_I2C1_Init:00000000 MX_I2C1_Init
     /tmp/ccmoXVAD.s:600    .text.MX_I2C1_Init:0000002c $d
     /tmp/ccmoXVAD.s:1336   .bss.hi2c1:00000000 hi2c1
     /tmp/ccmoXVAD.s:607    .text.MX_TIM3_Init:00000000 $t
     /tmp/ccmoXVAD.s:612    .text.MX_TIM3_Init:00000000 MX_TIM3_Init
     /tmp/ccmoXVAD.s:777    .text.MX_TIM3_Init:000000ac $d
     /tmp/ccmoXVAD.s:1322   .bss.htim3:00000000 htim3
     /tmp/ccmoXVAD.s:783    .text.MX_TIM4_Init:00000000 $t
     /tmp/ccmoXVAD.s:788    .text.MX_TIM4_Init:00000000 MX_TIM4_Init
     /tmp/ccmoXVAD.s:954    .text.MX_TIM4_Init:000000ac $d
     /tmp/ccmoXVAD.s:1315   .bss.htim4:00000000 htim4
     /tmp/ccmoXVAD.s:960    .text.MX_USART1_UART_Init:00000000 $t
     /tmp/ccmoXVAD.s:965    .text.MX_USART1_UART_Init:00000000 MX_USART1_UART_Init
     /tmp/ccmoXVAD.s:1020   .text.MX_USART1_UART_Init:0000002c $d
     /tmp/ccmoXVAD.s:1308   .bss.huart1:00000000 huart1
     /tmp/ccmoXVAD.s:1026   .text.SystemClock_Config:00000000 $t
     /tmp/ccmoXVAD.s:1032   .text.SystemClock_Config:00000000 SystemClock_Config
     /tmp/ccmoXVAD.s:1179   .text.SystemClock_Config:0000009c $d
     /tmp/ccmoXVAD.s:1185   .text.main:00000000 $t
     /tmp/ccmoXVAD.s:1191   .text.main:00000000 main
     /tmp/ccmoXVAD.s:1298   .text.main:0000007c $d
     /tmp/ccmoXVAD.s:1305   .bss.huart1:00000000 $d
     /tmp/ccmoXVAD.s:1312   .bss.htim4:00000000 $d
     /tmp/ccmoXVAD.s:1319   .bss.htim3:00000000 $d
     /tmp/ccmoXVAD.s:1326   .bss.htim2:00000000 $d
     /tmp/ccmoXVAD.s:1333   .bss.hi2c1:00000000 $d
     /tmp/ccmoXVAD.s:1340   .bss.hadc1:00000000 $d

UNDEFINED SYMBOLS
HAL_GPIO_WritePin
HAL_GPIO_Init
HAL_ADC_Init
HAL_ADC_ConfigChannel
HAL_TIM_Base_Init
HAL_TIM_ConfigClockSource
HAL_TIM_IC_Init
HAL_TIMEx_MasterConfigSynchronization
HAL_TIM_IC_ConfigChannel
HAL_I2C_Init
HAL_TIM_PWM_Init
HAL_TIM_PWM_ConfigChannel
ARM GAS  /tmp/ccmoXVAD.s 			page 59


HAL_TIM_MspPostInit
HAL_UART_Init
memset
HAL_RCC_OscConfig
HAL_RCC_ClockConfig
HAL_Init
setup_motor_dc
MPU6050_Init
HAL_Delay
HAL_TIM_IC_Start_IT
Ultrasonic_Get_Distance
MPU6050_Read_All
